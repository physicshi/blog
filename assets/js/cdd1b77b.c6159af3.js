"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4061],{3905:function(n,e,t){t.d(e,{Zo:function(){return p},kt:function(){return c}});var l=t(7294);function r(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function a(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(n);e&&(l=l.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,l)}return t}function i(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?a(Object(t),!0).forEach((function(e){r(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function u(n,e){if(null==n)return{};var t,l,r=function(n,e){if(null==n)return{};var t,l,r={},a=Object.keys(n);for(l=0;l<a.length;l++)t=a[l],e.indexOf(t)>=0||(r[t]=n[t]);return r}(n,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);for(l=0;l<a.length;l++)t=a[l],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(r[t]=n[t])}return r}var s=l.createContext({}),o=function(n){var e=l.useContext(s),t=e;return n&&(t="function"==typeof n?n(e):i(i({},e),n)),t},p=function(n){var e=o(n.components);return l.createElement(s.Provider,{value:e},n.children)},m={inlineCode:"code",wrapper:function(n){var e=n.children;return l.createElement(l.Fragment,{},e)}},d=l.forwardRef((function(n,e){var t=n.components,r=n.mdxType,a=n.originalType,s=n.parentName,p=u(n,["components","mdxType","originalType","parentName"]),d=o(t),c=r,h=d["".concat(s,".").concat(c)]||d[c]||m[c]||a;return t?l.createElement(h,i(i({ref:e},p),{},{components:t})):l.createElement(h,i({ref:e},p))}));function c(n,e){var t=arguments,r=e&&e.mdxType;if("string"==typeof n||r){var a=t.length,i=new Array(a);i[0]=d;var u={};for(var s in e)hasOwnProperty.call(e,s)&&(u[s]=e[s]);u.originalType=n,u.mdxType="string"==typeof n?n:r,i[1]=u;for(var o=2;o<a;o++)i[o]=t[o];return l.createElement.apply(null,i)}return l.createElement.apply(null,t)}d.displayName="MDXCreateElement"},6126:function(n,e,t){t.r(e),t.d(e,{frontMatter:function(){return u},contentTitle:function(){return s},metadata:function(){return o},toc:function(){return p},default:function(){return d}});var l=t(7462),r=t(3366),a=(t(7294),t(3905)),i=["components"],u={sidebar_position:1},s=void 0,o={unversionedId:"leetcode/leetcode\u65e5\u8bb0",id:"leetcode/leetcode\u65e5\u8bb0",isDocsHomePage:!1,title:"leetcode\u65e5\u8bb0",description:"989. \u6570\u7ec4\u5f62\u5f0f\u7684\u6574\u6570\u52a0\u6cd5",source:"@site/docs/leetcode/leetcode\u65e5\u8bb0.md",sourceDirName:"leetcode",slug:"/leetcode/leetcode\u65e5\u8bb0",permalink:"/docs/leetcode/leetcode\u65e5\u8bb0",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/leetcode/leetcode\u65e5\u8bb0.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"\u4e00\u4e9b\u9762\u8bd5",permalink:"/docs/\u4e0d\u53ea\u662f\u524d\u7aef/\u4e00\u4e9b\u9762\u8bd5"}},p=[{value:"989. \u6570\u7ec4\u5f62\u5f0f\u7684\u6574\u6570\u52a0\u6cd5",id:"989-\u6570\u7ec4\u5f62\u5f0f\u7684\u6574\u6570\u52a0\u6cd5",children:[{value:"\u601d\u8def",id:"\u601d\u8def",children:[]},{value:"\u4ee3\u7801",id:"\u4ee3\u7801",children:[]},{value:"\u590d\u6742\u5ea6",id:"\u590d\u6742\u5ea6",children:[]},{value:"rust \u7248\u672c",id:"rust-\u7248\u672c",children:[]}]},{value:"821. \u5b57\u7b26\u7684\u6700\u77ed\u8ddd\u79bb",id:"821-\u5b57\u7b26\u7684\u6700\u77ed\u8ddd\u79bb",children:[{value:"\u601d\u8def",id:"\u601d\u8def-1",children:[]},{value:"\u4ee3\u7801",id:"\u4ee3\u7801-1",children:[]},{value:"\u590d\u6742\u5ea6\u5206\u6790",id:"\u590d\u6742\u5ea6\u5206\u6790",children:[]},{value:"rust \u7248\u672c",id:"rust-\u7248\u672c-1",children:[]}]},{value:"1381. \u8bbe\u8ba1\u4e00\u4e2a\u652f\u6301\u589e\u91cf\u64cd\u4f5c\u7684\u6808",id:"1381-\u8bbe\u8ba1\u4e00\u4e2a\u652f\u6301\u589e\u91cf\u64cd\u4f5c\u7684\u6808",children:[{value:"\u601d\u8def",id:"\u601d\u8def-2",children:[]},{value:"\u4ee3\u7801",id:"\u4ee3\u7801-2",children:[]},{value:"\u590d\u6742\u5ea6",id:"\u590d\u6742\u5ea6-1",children:[]},{value:"rust \u7248\u672c",id:"rust-\u7248\u672c-2",children:[]}]},{value:"394.\u5b57\u7b26\u4e32\u7f16\u7801",id:"394\u5b57\u7b26\u4e32\u7f16\u7801",children:[{value:"\u601d\u8def",id:"\u601d\u8def-3",children:[]},{value:"\u4ee3\u7801",id:"\u4ee3\u7801-3",children:[]},{value:"\u590d\u6742\u5ea6",id:"\u590d\u6742\u5ea6-2",children:[]},{value:"rust \u7248\u672c",id:"rust-\u7248\u672c-3",children:[]}]},{value:"232. \u7528\u6808\u5b9e\u73b0\u961f\u5217",id:"232-\u7528\u6808\u5b9e\u73b0\u961f\u5217",children:[{value:"\u601d\u8def",id:"\u601d\u8def-4",children:[]},{value:"\u4ee3\u7801",id:"\u4ee3\u7801-4",children:[]},{value:"\u590d\u6742\u5ea6",id:"\u590d\u6742\u5ea6-3",children:[]},{value:"rust \u7248\u672c",id:"rust-\u7248\u672c-4",children:[]}]},{value:"768. \u6700\u591a\u80fd\u5b8c\u6210\u6392\u5e8f\u7684\u5757 II",id:"768-\u6700\u591a\u80fd\u5b8c\u6210\u6392\u5e8f\u7684\u5757-ii",children:[{value:"\u601d\u8def",id:"\u601d\u8def-5",children:[]},{value:"\u4ee3\u7801",id:"\u4ee3\u7801-5",children:[]},{value:"\u590d\u6742\u5ea6",id:"\u590d\u6742\u5ea6-4",children:[]},{value:"rust \u7248\u672c",id:"rust-\u7248\u672c-5",children:[]}]},{value:"61. \u65cb\u8f6c\u94fe\u8868",id:"61-\u65cb\u8f6c\u94fe\u8868",children:[{value:"\u601d\u8def",id:"\u601d\u8def-6",children:[]},{value:"\u4ee3\u7801",id:"\u4ee3\u7801-6",children:[]},{value:"\u590d\u6742\u5ea6",id:"\u590d\u6742\u5ea6-5",children:[]},{value:"rust \u7248\u672c",id:"rust-\u7248\u672c-6",children:[]}]},{value:"24. \u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9",id:"24-\u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9",children:[{value:"\u601d\u8def",id:"\u601d\u8def-7",children:[]},{value:"\u4ee3\u7801",id:"\u4ee3\u7801-7",children:[]},{value:"\u590d\u6742\u5ea6",id:"\u590d\u6742\u5ea6-6",children:[]},{value:"rust \u7248\u672c",id:"rust-\u7248\u672c-7",children:[]}]},{value:"109. \u6709\u5e8f\u94fe\u8868\u8f6c\u6362\u4e8c\u53c9\u641c\u7d22\u6811",id:"109-\u6709\u5e8f\u94fe\u8868\u8f6c\u6362\u4e8c\u53c9\u641c\u7d22\u6811",children:[{value:"\u601d\u8def",id:"\u601d\u8def-8",children:[]},{value:"\u4ee3\u7801",id:"\u4ee3\u7801-8",children:[]},{value:"\u590d\u6742\u5ea6",id:"\u590d\u6742\u5ea6-7",children:[]},{value:"rust \u7248\u672c",id:"rust-\u7248\u672c-8",children:[]}]},{value:"160. \u76f8\u4ea4\u94fe\u8868",id:"160-\u76f8\u4ea4\u94fe\u8868",children:[{value:"\u601d\u8def",id:"\u601d\u8def-9",children:[]},{value:"\u4ee3\u7801",id:"\u4ee3\u7801-9",children:[]},{value:"\u590d\u6742\u5ea6",id:"\u590d\u6742\u5ea6-8",children:[]}]},{value:"142. \u73af\u5f62\u94fe\u8868 II",id:"142-\u73af\u5f62\u94fe\u8868-ii",children:[{value:"\u601d\u8def",id:"\u601d\u8def-10",children:[]},{value:"\u4ee3\u7801",id:"\u4ee3\u7801-10",children:[]},{value:"\u590d\u6742\u5ea6",id:"\u590d\u6742\u5ea6-9",children:[]}]},{value:"146. LRU \u7f13\u5b58",id:"146-lru-\u7f13\u5b58",children:[{value:"\u601d\u8def",id:"\u601d\u8def-11",children:[]},{value:"\u4ee3\u7801",id:"\u4ee3\u7801-11",children:[]},{value:"\u590d\u6742\u5ea6",id:"\u590d\u6742\u5ea6-10",children:[]}]},{value:"104. \u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6",id:"104-\u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6",children:[{value:"\u601d\u8def",id:"\u601d\u8def-12",children:[]},{value:"\u4ee3\u7801",id:"\u4ee3\u7801-12",children:[]},{value:"\u590d\u6742\u5ea6",id:"\u590d\u6742\u5ea6-11",children:[]},{value:"rust \u7248\u672c",id:"rust-\u7248\u672c-9",children:[]}]},{value:"100. \u76f8\u540c\u7684\u6811",id:"100-\u76f8\u540c\u7684\u6811",children:[{value:"\u601d\u8def",id:"\u601d\u8def-13",children:[]},{value:"\u4ee3\u7801",id:"\u4ee3\u7801-13",children:[]},{value:"\u590d\u6742\u5ea6",id:"\u590d\u6742\u5ea6-12",children:[]},{value:"rust \u7248\u672c",id:"rust-\u7248\u672c-10",children:[]}]},{value:"129. \u6c42\u6839\u8282\u70b9\u5230\u53f6\u8282\u70b9\u6570\u5b57\u4e4b\u548c",id:"129-\u6c42\u6839\u8282\u70b9\u5230\u53f6\u8282\u70b9\u6570\u5b57\u4e4b\u548c",children:[{value:"\u601d\u8def",id:"\u601d\u8def-14",children:[]},{value:"\u4ee3\u7801",id:"\u4ee3\u7801-14",children:[]},{value:"\u590d\u6742\u5ea6",id:"\u590d\u6742\u5ea6-13",children:[]},{value:"rust \u7248\u672c",id:"rust-\u7248\u672c-11",children:[]}]},{value:"513. \u627e\u6811\u5de6\u4e0b\u89d2\u7684\u503c",id:"513-\u627e\u6811\u5de6\u4e0b\u89d2\u7684\u503c",children:[{value:"\u601d\u8def",id:"\u601d\u8def-15",children:[]},{value:"\u4ee3\u7801",id:"\u4ee3\u7801-15",children:[]},{value:"\u590d\u6742\u5ea6",id:"\u590d\u6742\u5ea6-14",children:[]}]},{value:"297. \u4e8c\u53c9\u6811\u7684\u5e8f\u5217\u5316\u4e0e\u53cd\u5e8f\u5217\u5316",id:"297-\u4e8c\u53c9\u6811\u7684\u5e8f\u5217\u5316\u4e0e\u53cd\u5e8f\u5217\u5316",children:[{value:"\u601d\u8def",id:"\u601d\u8def-16",children:[]},{value:"\u4ee3\u7801",id:"\u4ee3\u7801-16",children:[]},{value:"\u590d\u6742\u5ea6",id:"\u590d\u6742\u5ea6-15",children:[]}]},{value:"987. \u4e8c\u53c9\u6811\u7684\u5782\u5e8f\u904d\u5386",id:"987-\u4e8c\u53c9\u6811\u7684\u5782\u5e8f\u904d\u5386",children:[{value:"\u601d\u8def",id:"\u601d\u8def-17",children:[]},{value:"\u4ee3\u7801",id:"\u4ee3\u7801-17",children:[]},{value:"\u590d\u6742\u5ea6",id:"\u590d\u6742\u5ea6-16",children:[]}]},{value:"1. \u4e24\u6570\u4e4b\u548c",id:"1-\u4e24\u6570\u4e4b\u548c",children:[{value:"\u601d\u8def",id:"\u601d\u8def-18",children:[]},{value:"\u4ee3\u7801",id:"\u4ee3\u7801-18",children:[]},{value:"\u590d\u6742\u5ea6",id:"\u590d\u6742\u5ea6-17",children:[]},{value:"rust \u7248\u672c",id:"rust-\u7248\u672c-12",children:[]}]},{value:"347. \u524d K \u4e2a\u9ad8\u9891\u5143\u7d20",id:"347-\u524d-k-\u4e2a\u9ad8\u9891\u5143\u7d20",children:[{value:"\u601d\u8def",id:"\u601d\u8def-19",children:[]},{value:"\u4ee3\u7801",id:"\u4ee3\u7801-19",children:[]},{value:"\u590d\u6742\u5ea6",id:"\u590d\u6742\u5ea6-18",children:[]}]},{value:"447. \u56de\u65cb\u9556\u7684\u6570\u91cf",id:"447-\u56de\u65cb\u9556\u7684\u6570\u91cf",children:[{value:"\u601d\u8def",id:"\u601d\u8def-20",children:[]},{value:"\u4ee3\u7801",id:"\u4ee3\u7801-20",children:[]},{value:"\u590d\u6742\u5ea6",id:"\u590d\u6742\u5ea6-19",children:[]}]},{value:"3. \u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32",id:"3-\u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32",children:[{value:"\u601d\u8def",id:"\u601d\u8def-21",children:[]},{value:"\u4ee3\u7801",id:"\u4ee3\u7801-21",children:[]},{value:"\u590d\u6742\u5ea6",id:"\u590d\u6742\u5ea6-20",children:[]}]},{value:"30. \u4e32\u8054\u6240\u6709\u5355\u8bcd\u7684\u5b50\u4e32",id:"30-\u4e32\u8054\u6240\u6709\u5355\u8bcd\u7684\u5b50\u4e32",children:[{value:"\u601d\u8def",id:"\u601d\u8def-22",children:[]},{value:"\u4ee3\u7801",id:"\u4ee3\u7801-22",children:[]},{value:"\u590d\u6742\u5ea6",id:"\u590d\u6742\u5ea6-21",children:[]}]},{value:"1590. \u4f7f\u6570\u7ec4\u548c\u80fd\u88ab P \u6574\u9664",id:"1590-\u4f7f\u6570\u7ec4\u548c\u80fd\u88ab-p-\u6574\u9664",children:[{value:"\u601d\u8def",id:"\u601d\u8def-23",children:[]},{value:"\u4ee3\u7801",id:"\u4ee3\u7801-23",children:[]},{value:"\u590d\u6742\u5ea6",id:"\u590d\u6742\u5ea6-22",children:[]}]},{value:"876. \u94fe\u8868\u7684\u4e2d\u95f4\u7ed3\u70b9",id:"876-\u94fe\u8868\u7684\u4e2d\u95f4\u7ed3\u70b9",children:[{value:"\u601d\u8def",id:"\u601d\u8def-24",children:[]},{value:"\u4ee3\u7801",id:"\u4ee3\u7801-24",children:[]},{value:"\u590d\u6742\u5ea6",id:"\u590d\u6742\u5ea6-23",children:[]}]},{value:"26.\u5220\u9664\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u9879",id:"26\u5220\u9664\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u9879",children:[{value:"\u601d\u8def",id:"\u601d\u8def-25",children:[]},{value:"\u4ee3\u7801",id:"\u4ee3\u7801-25",children:[]},{value:"\u590d\u6742\u5ea6",id:"\u590d\u6742\u5ea6-24",children:[]}]},{value:"35. \u641c\u7d22\u63d2\u5165\u4f4d\u7f6e",id:"35-\u641c\u7d22\u63d2\u5165\u4f4d\u7f6e",children:[{value:"\u601d\u8def",id:"\u601d\u8def-26",children:[]},{value:"\u4ee3\u7801",id:"\u4ee3\u7801-26",children:[]},{value:"\u590d\u6742\u5ea6",id:"\u590d\u6742\u5ea6-25",children:[]}]},{value:"239. \u6ed1\u52a8\u7a97\u53e3\u6700\u5927\u503c",id:"239-\u6ed1\u52a8\u7a97\u53e3\u6700\u5927\u503c",children:[{value:"\u601d\u8def",id:"\u601d\u8def-27",children:[]},{value:"\u4ee3\u7801",id:"\u4ee3\u7801-27",children:[]},{value:"\u590d\u6742\u5ea6",id:"\u590d\u6742\u5ea6-26",children:[]}]},{value:"997. \u627e\u5230\u5c0f\u9547\u7684\u6cd5\u5b98",id:"997-\u627e\u5230\u5c0f\u9547\u7684\u6cd5\u5b98",children:[{value:"\u601d\u8def",id:"\u601d\u8def-28",children:[]},{value:"\u4ee3\u7801",id:"\u4ee3\u7801-28",children:[]},{value:"\u590d\u6742\u5ea6",id:"\u590d\u6742\u5ea6-27",children:[]}]},{value:"886. \u53ef\u80fd\u7684\u4e8c\u5206\u6cd5",id:"886-\u53ef\u80fd\u7684\u4e8c\u5206\u6cd5",children:[{value:"\u601d\u8def",id:"\u601d\u8def-29",children:[]},{value:"\u4ee3\u7801",id:"\u4ee3\u7801-29",children:[]},{value:"\u590d\u6742\u5ea6",id:"\u590d\u6742\u5ea6-28",children:[]}]},{value:"657. \u673a\u5668\u4eba\u80fd\u5426\u8fd4\u56de\u539f\u70b9",id:"657-\u673a\u5668\u4eba\u80fd\u5426\u8fd4\u56de\u539f\u70b9",children:[{value:"\u601d\u8def",id:"\u601d\u8def-30",children:[]},{value:"\u4ee3\u7801",id:"\u4ee3\u7801-30",children:[]},{value:"\u590d\u6742\u5ea6",id:"\u590d\u6742\u5ea6-29",children:[]}]},{value:"1834. \u5355\u7ebf\u7a0b CPU",id:"1834-\u5355\u7ebf\u7a0b-cpu",children:[{value:"\u601d\u8def",id:"\u601d\u8def-31",children:[]},{value:"\u4ee3\u7801",id:"\u4ee3\u7801-31",children:[]},{value:"\u590d\u6742\u5ea6",id:"\u590d\u6742\u5ea6-30",children:[]}]}],m={toc:p};function d(n){var e=n.components,t=(0,r.Z)(n,i);return(0,a.kt)("wrapper",(0,l.Z)({},m,t,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"989-\u6570\u7ec4\u5f62\u5f0f\u7684\u6574\u6570\u52a0\u6cd5"},(0,a.kt)("a",{parentName:"h2",href:"https://leetcode-cn.com/problems/add-to-array-form-of-integer/"},"989. \u6570\u7ec4\u5f62\u5f0f\u7684\u6574\u6570\u52a0\u6cd5")),(0,a.kt)("p",null,"4 \u6708 1 \u65e5"),(0,a.kt)("h3",{id:"\u601d\u8def"},"\u601d\u8def"),(0,a.kt)("p",null,"\u6309\u4f4d\u6c42\u548c\uff0c\u7528 flag \u4fdd\u5b58\u8fdb\u4f4d\uff0c\u52a0\u5230\u4e0b\u4e00\u8f6e"),(0,a.kt)("h3",{id:"\u4ee3\u7801"},"\u4ee3\u7801"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"var addToArrayForm = function (num, k) {\n  const res = [];\n  let order = num.length - 1;\n  // \u8fdb\u4f4d\n  let flag = 0;\n  while (order >= 0 || k != 0) {\n    let x = order >= 0 ? num[order] : 0;\n    let y = k != 0 ? k % 10 : 0;\n    let sum = x + y + flag;\n    // \u4fdd\u5b58\u4f59\u6570\n    res.push(sum % 10);\n    flag = Math.floor(sum / 10);\n    k = Math.floor(k / 10);\n    order--;\n  }\n  if (flag) res.push(flag);\n  return res.reverse();\n};\n")),(0,a.kt)("h3",{id:"\u590d\u6742\u5ea6"},"\u590d\u6742\u5ea6"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)"),(0,a.kt)("li",{parentName:"ul"},"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)")),(0,a.kt)("h3",{id:"rust-\u7248\u672c"},"rust \u7248\u672c"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"impl Solution {\n    pub fn add_to_array_form(num: Vec<i32>, k: i32) -> Vec<i32> {\n        let mut res: Vec<i32> = vec![];\n        let len = num.len() - 1;\n        let mut i: i32 = len as i32;\n        let mut K = k;\n        while i >= 0 || K > 0 {\n            if (i >= 0) {\n                K = K + num[i as usize]\n            }\n            res.push(K % 10);\n            K = K / 10;\n            i = i - 1;\n        }\n        res.reverse();\n        res\n    }\n}\n")),(0,a.kt)("h2",{id:"821-\u5b57\u7b26\u7684\u6700\u77ed\u8ddd\u79bb"},(0,a.kt)("a",{parentName:"h2",href:"https://leetcode-cn.com/problems/shortest-distance-to-a-character/"},"821. \u5b57\u7b26\u7684\u6700\u77ed\u8ddd\u79bb")),(0,a.kt)("p",null,"4 \u6708 2 \u65e5"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 S \u548c\u4e00\u4e2a\u5b57\u7b26 C\u3002\u8fd4\u56de\u4e00\u4e2a\u4ee3\u8868\u5b57\u7b26\u4e32 S \u4e2d\u6bcf\u4e2a\u5b57\u7b26\u5230\u5b57\u7b26\u4e32 S \u4e2d\u7684\u5b57\u7b26 C \u7684\u6700\u77ed\u8ddd\u79bb\u7684\u6570\u7ec4\u3002\n\n\u793a\u4f8b 1:\n\n\u8f93\u5165: S = \"loveleetcode\", C = 'e'\n\u8f93\u51fa: [3, 2, 1, 0, 1, 0, 0, 1, 2, 2, 1, 0]\n\u8bf4\u660e:\n\n- \u5b57\u7b26\u4e32 S \u7684\u957f\u5ea6\u8303\u56f4\u4e3a [1, 10000]\u3002\n- C \u662f\u4e00\u4e2a\u5355\u5b57\u7b26\uff0c\u4e14\u4fdd\u8bc1\u662f\u5b57\u7b26\u4e32 S \u91cc\u7684\u5b57\u7b26\u3002\n- S \u548c C \u4e2d\u7684\u6240\u6709\u5b57\u6bcd\u5747\u4e3a\u5c0f\u5199\u5b57\u6bcd\u3002\n")),(0,a.kt)("h3",{id:"\u601d\u8def-1"},"\u601d\u8def"),(0,a.kt)("p",null,"\u4e2d\u5fc3\u6269\u5c55\uff08\u53cc\u6307\u9488\uff09\uff0c\u4ece\u5f53\u524d\u5b57\u7b26\u5411\u4e24\u8fb9\u627e\u76ee\u6807\u5b57\u7b26\uff0c\u8ba1\u7b97\u8ddd\u79bb\uff0c\u9009\u53d6\u6700\u5c0f\u503c\u3002"),(0,a.kt)("h3",{id:"\u4ee3\u7801-1"},"\u4ee3\u7801"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"var shortestToChar = function (s, c) {\n  const res = new Array(s.length).fill(0);\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == c) {\n      continue;\n    }\n    let l = i,\n      r = i,\n      shortest = Infinity;\n    while (l >= 0) {\n      if (s[l] == c) {\n        shortest = Math.min(i - l, shortest);\n        break;\n      }\n      l--;\n    }\n    while (r < s.length) {\n      if (s[r] == c) {\n        shortest = Math.min(r - i, shortest);\n        break;\n      }\n      r++;\n    }\n    res[i] = shortest;\n  }\n  return res;\n};\n")),(0,a.kt)("h3",{id:"\u590d\u6742\u5ea6\u5206\u6790"},"\u590d\u6742\u5ea6\u5206\u6790"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\uff0cn \u4e3a s \u7684\u957f\u5ea6\uff0c\u4e24\u5c42\u5faa\u73af"),(0,a.kt)("li",{parentName:"ul"},"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)")),(0,a.kt)("h3",{id:"rust-\u7248\u672c-1"},"rust \u7248\u672c"),(0,a.kt)("p",null,"\u6536\u96c6\u5b57\u7b26 c \u7684\u4f4d\u7f6e\uff0c\u5bf9\u5f53\u524d\u5143\u7d20\u6c42\u5176\u5230\u6bcf\u4e00\u4e2a\u5b57\u7b26 c \u7684\u8ddd\u79bb\uff0c\u53d6\u6700\u5c0f\u503c"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"impl Solution {\n    pub fn shortest_to_char(s: String, c: char) -> Vec<i32> {\n        // n \u7528\u6765\u6536\u96c6 \u5b57\u7b26c\u51fa\u73b0\u7684\u4f4d\u7f6e\n        let mut n: Vec<i32> = Vec::new();\n        let mut a: Vec<i32> = Vec::new();\n        // \u9898\u76ee\u4e2d\u6700\u5927\u662f10^4 \u6b21\u65b9\n        let mut min = 10000;\n        for (i, v) in s.chars().enumerate() {\n            if v == c {\n                n.push(i as i32);\n            }\n        }\n        // \u904d\u5386\u5b57\u7b26\u4e32\uff0c\u5bf9\u5f53\u524d\u5143\u7d20\uff0c\u904d\u5386\u76ee\u6807\u5b57\u7b26\u7ec4\u96c6\uff0c\u5f97\u5230\u5f53\u524d\u5143\u7d20\u548c\u6bcf\u4e00\u4e2a\u76ee\u6807\u5b57\u7b26\u7684\u8ddd\u79bb\uff0c\u8bb0\u5f55\u6700\u5c0f\u503c\n        for i in 0..s.len() {\n            min = 10000;\n            for (_, v) in n.iter().enumerate() {\n                let m = i32::abs(v - i as i32);\n                if min > m {\n                    min = m;\n                }\n            }\n            a.push(min);\n        }\n        a\n    }\n}\n")),(0,a.kt)("h2",{id:"1381-\u8bbe\u8ba1\u4e00\u4e2a\u652f\u6301\u589e\u91cf\u64cd\u4f5c\u7684\u6808"},(0,a.kt)("a",{parentName:"h2",href:"https://leetcode-cn.com/problems/design-a-stack-with-increment-operation/"},"1381. \u8bbe\u8ba1\u4e00\u4e2a\u652f\u6301\u589e\u91cf\u64cd\u4f5c\u7684\u6808")),(0,a.kt)("p",null,"4 \u6708 3 \u65e5"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'\u8bf7\u4f60\u8bbe\u8ba1\u4e00\u4e2a\u652f\u6301\u4e0b\u8ff0\u64cd\u4f5c\u7684\u6808\u3002\n\n\u5b9e\u73b0\u81ea\u5b9a\u4e49\u6808\u7c7b CustomStack \uff1a\n\nCustomStack(int maxSize)\uff1a\u7528 maxSize \u521d\u59cb\u5316\u5bf9\u8c61\uff0cmaxSize \u662f\u6808\u4e2d\u6700\u591a\u80fd\u5bb9\u7eb3\u7684\u5143\u7d20\u6570\u91cf\uff0c\u6808\u5728\u589e\u957f\u5230 maxSize \u4e4b\u540e\u5219\u4e0d\u652f\u6301 push \u64cd\u4f5c\u3002\nvoid push(int x)\uff1a\u5982\u679c\u6808\u8fd8\u672a\u589e\u957f\u5230 maxSize \uff0c\u5c31\u5c06 x \u6dfb\u52a0\u5230\u6808\u9876\u3002\nint pop()\uff1a\u5f39\u51fa\u6808\u9876\u5143\u7d20\uff0c\u5e76\u8fd4\u56de\u6808\u9876\u7684\u503c\uff0c\u6216\u6808\u4e3a\u7a7a\u65f6\u8fd4\u56de -1 \u3002\nvoid inc(int k, int val)\uff1a\u6808\u5e95\u7684 k \u4e2a\u5143\u7d20\u7684\u503c\u90fd\u589e\u52a0 val \u3002\u5982\u679c\u6808\u4e2d\u5143\u7d20\u603b\u6570\u5c0f\u4e8e k \uff0c\u5219\u6808\u4e2d\u7684\u6240\u6709\u5143\u7d20\u90fd\u589e\u52a0 val \u3002\n\n\n\u793a\u4f8b\uff1a\n\n\u8f93\u5165\uff1a\n["CustomStack","push","push","pop","push","push","push","increment","increment","pop","pop","pop","pop"]\n[[3],[1],[2],[],[2],[3],[4],[5,100],[2,100],[],[],[],[]]\n\u8f93\u51fa\uff1a\n[null,null,null,2,null,null,null,null,null,103,202,201,-1]\n\u89e3\u91ca\uff1a\nCustomStack customStack = new CustomStack(3); // \u6808\u662f\u7a7a\u7684 []\ncustomStack.push(1); // \u6808\u53d8\u4e3a [1]\ncustomStack.push(2); // \u6808\u53d8\u4e3a [1, 2]\ncustomStack.pop(); // \u8fd4\u56de 2 --\x3e \u8fd4\u56de\u6808\u9876\u503c 2\uff0c\u6808\u53d8\u4e3a [1]\ncustomStack.push(2); // \u6808\u53d8\u4e3a [1, 2]\ncustomStack.push(3); // \u6808\u53d8\u4e3a [1, 2, 3]\ncustomStack.push(4); // \u6808\u4ecd\u7136\u662f [1, 2, 3]\uff0c\u4e0d\u80fd\u6dfb\u52a0\u5176\u4ed6\u5143\u7d20\u4f7f\u6808\u5927\u5c0f\u53d8\u4e3a 4\ncustomStack.increment(5, 100); // \u6808\u53d8\u4e3a [101, 102, 103]\ncustomStack.increment(2, 100); // \u6808\u53d8\u4e3a [201, 202, 103]\ncustomStack.pop(); // \u8fd4\u56de 103 --\x3e \u8fd4\u56de\u6808\u9876\u503c 103\uff0c\u6808\u53d8\u4e3a [201, 202]\ncustomStack.pop(); // \u8fd4\u56de 202 --\x3e \u8fd4\u56de\u6808\u9876\u503c 202\uff0c\u6808\u53d8\u4e3a [201]\ncustomStack.pop(); // \u8fd4\u56de 201 --\x3e \u8fd4\u56de\u6808\u9876\u503c 201\uff0c\u6808\u53d8\u4e3a []\ncustomStack.pop(); // \u8fd4\u56de -1 --\x3e \u6808\u4e3a\u7a7a\uff0c\u8fd4\u56de -1\n\n\n\u63d0\u793a\uff1a\n\n1 <= maxSize <= 1000\n1 <= x <= 1000\n1 <= k <= 1000\n0 <= val <= 100\n\u6bcf\u79cd\u65b9\u6cd5 increment\uff0cpush \u4ee5\u53ca pop \u5206\u522b\u6700\u591a\u8c03\u7528 1000 \u6b21\n')),(0,a.kt)("h3",{id:"\u601d\u8def-2"},"\u601d\u8def"),(0,a.kt)("p",null,"\u76f4\u63a5\u6309\u7740\u9898\u610f\u5373\u53ef\u3002"),(0,a.kt)("h3",{id:"\u4ee3\u7801-2"},"\u4ee3\u7801"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * @param {number} maxSize\n */\nvar CustomStack = function (maxSize) {\n  this.stack = [];\n  this.maxSize = maxSize;\n};\n\n/**\n * @param {number} x\n * @return {void}\n */\nCustomStack.prototype.push = function (x) {\n  if (this.stack.length === this.maxSize) {\n    return null;\n  }\n  this.stack.push(x);\n};\n\n/**\n * @return {number}\n */\nCustomStack.prototype.pop = function () {\n  var x = this.stack.pop();\n  return x === undefined ? -1 : x;\n};\n\n/**\n * @param {number} k\n * @param {number} val\n * @return {void}\n */\nCustomStack.prototype.increment = function (k, val) {\n  for (let i = 0; i < k && i < this.stack.length; i++) {\n    this.stack[i] = this.stack[i] + val;\n  }\n};\n\n/**\n * Your CustomStack object will be instantiated and called as such:\n * var obj = new CustomStack(maxSize)\n * obj.push(x)\n * var param_2 = obj.pop()\n * obj.increment(k,val)\n */\n")),(0,a.kt)("h3",{id:"\u590d\u6742\u5ea6-1"},"\u590d\u6742\u5ea6"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u65f6\u95f4\u590d\u6742\u5ea6\uff1apush \u64cd\u4f5c\u548c pop \u64cd\u4f5c\u7684\u6e10\u8fdb\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(1)\uff0cinc \u64cd\u4f5c\u7684\u6e10\u8fdb\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(k)"),(0,a.kt)("li",{parentName:"ul"},"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(maxSize)")),(0,a.kt)("h3",{id:"rust-\u7248\u672c-2"},"rust \u7248\u672c"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"struct CustomStack {\n    vec: Vec<i32>,\n}\n\n\n/**\n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl CustomStack {\n\n    fn new(maxSize: i32) -> Self {\n        CustomStack {\n            vec: Vec::with_capacity(maxSize as usize),\n        }\n    }\n\n    fn push(&mut self, x: i32) {\n        if self.vec.len() + 1 <= self.vec.capacity() {\n            self.vec.push(x)\n        }\n    }\n\n    fn pop(&mut self) -> i32 {\n        self.vec.pop().unwrap_or(-1)\n    }\n\n    fn increment(&mut self, k: i32, val: i32) {\n        // iter_mut() \u65b9\u6cd5\u8fd4\u56de\u7684\u8fed\u4ee3\u5143\u7d20\u662f\u4e00\u4e2a \u5f15\u7528\u7c7b\u578b\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5bf9\u8fed\u4ee3\u53d8\u91cf \u89e3\u5f15\u7528 \u7684\u65b9\u5f0f\u6765\u91cd\u65b0\u8d4b\u503c\u3002\n        // take \u521b\u5efa\u4e00\u4e2a\u8fed\u4ee3\u5668\n        for num in self.vec.iter_mut().take(k as usize){\n            *num = val + *num\n        }\n    }\n}\n\n/**\n * Your CustomStack object will be instantiated and called as such:\n * let obj = CustomStack::new(maxSize);\n * obj.push(x);\n * let ret_2: i32 = obj.pop();\n * obj.increment(k, val);\n */\n")),(0,a.kt)("h2",{id:"394\u5b57\u7b26\u4e32\u7f16\u7801"},(0,a.kt)("a",{parentName:"h2",href:"https://leetcode-cn.com/problems/decode-string/"},"394.\u5b57\u7b26\u4e32\u7f16\u7801")),(0,a.kt)("p",null,"4 \u6708 4 \u65e5"),(0,a.kt)("h3",{id:"\u601d\u8def-3"},"\u601d\u8def"),(0,a.kt)("p",null,"\u7ef4\u62a4\u4e00\u4e2a\u6808\uff0c\u904d\u5386\u5224\u65ad"),(0,a.kt)("h3",{id:"\u4ee3\u7801-3"},"\u4ee3\u7801"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'// \u7ef4\u62a4\u4e00\u4e2a\u6808\nvar decodeString = function (s) {\n  const stack = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] != "]") {\n      stack.push(s[i]);\n      continue;\n    }\n    let str = "";\n    let cur = stack.pop();\n    while (cur != "[") {\n      // \u52a0\u5728\u5f53\u524d\u7684\u540e\u9762\n      str = cur + str;\n      cur = stack.pop();\n    }\n    let num = "";\n    // \u6392\u9664 "["\n    cur = stack.pop();\n    // \u5bf9\u4e8e\u6570\u5b57\n    while (!isNaN(cur)) {\n      // \u5b57\u7b26\u4e32\u76f8\u52a0\n      num = cur + num;\n      cur = stack.pop();\n    }\n    // \u5b57\u6bcd \u6216\u8005 "["\n    stack.push(cur);\n    stack.push(str.repeat(num));\n  }\n  return stack.join("");\n};\n')),(0,a.kt)("h3",{id:"\u590d\u6742\u5ea6-2"},"\u590d\u6742\u5ea6"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)"),(0,a.kt)("li",{parentName:"ul"},"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)")),(0,a.kt)("h3",{id:"rust-\u7248\u672c-3"},"rust \u7248\u672c"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"impl Solution {\n    pub fn decode_string(s: String) -> String {\n        let mut stack: Vec<(usize, String)> = Vec::new();\n        let (mut n, mut str) = (0, String::new());\n        for c in s.chars() {\n            // \u6a21\u5f0f\u5339\u914d\n            match c {\n                // \u7f13\u5b58\u524d\u9762\u7684\u5b57\u7b26\uff0c\u4ee5\u53ca\u4e0b\u4e00\u7ec4\u7684\u91cd\u590d\u6b21\u6570\n                '[' => {\n                    stack.push((n, str.clone()));\n                    n = 0;\n                    str.clear();\n                }\n                // \u89e3\u7801\u5b57\u7b26\u4e32\n                ']' => {\n                    if let Some(last) = stack.pop() {\n                        str = last.1 + str.repeat(last.0).as_str();\n                    }\n                }\n                // \u6ce8\u610f\u8981 n*10\n                '0'..='9' => n = n * 10 + (c as u8 - b'0') as usize,\n                // \u7f13\u5b58\u5b57\u7b26\n                c => str.push(c),\n            }\n        }\n        str\n    }\n}\n")),(0,a.kt)("h2",{id:"232-\u7528\u6808\u5b9e\u73b0\u961f\u5217"},(0,a.kt)("a",{parentName:"h2",href:"https://leetcode-cn.com/problems/implement-queue-using-stacks/"},"232. \u7528\u6808\u5b9e\u73b0\u961f\u5217")),(0,a.kt)("p",null,"4 \u6708 5 \u65e5"),(0,a.kt)("h3",{id:"\u601d\u8def-4"},"\u601d\u8def"),(0,a.kt)("p",null,"rust \u53cc\u6808\u5b9e\u73b0\u961f\u5217"),(0,a.kt)("h3",{id:"\u4ee3\u7801-4"},"\u4ee3\u7801"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * Initialize your data structure here.\n */\nvar MyQueue = function () {\n  this.input = [];\n  this.output = [];\n};\n\n/**\n * Push element x to the back of queue.\n * @param {number} x\n * @return {void}\n */\nMyQueue.prototype.push = function (x) {\n  this.input.push(x);\n};\n\n/**\n * Removes the element from in front of queue and returns that element.\n * @return {number}\n */\nMyQueue.prototype.pop = function () {\n  if (!this.output.length) {\n    while (this.input.length) {\n      this.output.push(this.input.pop());\n    }\n  }\n  return this.output.pop();\n};\n\n/**\n * Get the front element.\n * @return {number}\n */\nMyQueue.prototype.peek = function () {\n  if (!this.output.length) {\n    while (this.input.length) {\n      this.output.push(this.input.pop());\n    }\n  }\n  return this.output[this.output.length - 1];\n};\n\n/**\n * Returns whether the queue is empty.\n * @return {boolean}\n */\nMyQueue.prototype.empty = function () {\n  return this.input.length == 0 && this.output.length == 0;\n};\n")),(0,a.kt)("h3",{id:"\u590d\u6742\u5ea6-3"},"\u590d\u6742\u5ea6"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"\u9488\u5bf9\u4e8e rust \u6765\u8bf4")),(0,a.kt)("p",null,"push \uff1a"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(1)"),(0,a.kt)("li",{parentName:"ul"},"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)")),(0,a.kt)("p",null,"pop \uff1a"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(1)"),(0,a.kt)("li",{parentName:"ul"},"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)")),(0,a.kt)("p",null,"peek\uff1a"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u6700\u597d\u7684\u60c5\u51b5 O(1) \u6700\u574f\u7684\u60c5\u51b5 O(n)"),(0,a.kt)("li",{parentName:"ul"},"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)")),(0,a.kt)("p",null,"empty\uff1a"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(1)"),(0,a.kt)("li",{parentName:"ul"},"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)")),(0,a.kt)("h3",{id:"rust-\u7248\u672c-4"},"rust \u7248\u672c"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"struct MyQueue {\n    input: Vec<i32>,\n    output: Vec<i32>,\n}\n\nimpl MyQueue {\n\n    fn new() -> Self {\n        Self {\n            input: vec![],\n            output: vec![],\n        }\n    }\n\n    fn push(&mut self, x: i32) {\n        self.input.push(x);\n    }\n\n    fn pop(&mut self) -> i32 {\n        self.peek();\n        self.output.pop().unwrap()\n    }\n\n    fn peek(&mut self) -> i32 {\n        if self.output.is_empty() {\n            while self.input.len() > 0 {\n                self.output.push(self.input.pop().unwrap());\n            }\n\n        }\n        self.output.last().cloned().unwrap()\n    }\n\n    fn empty(&mut self) -> bool {\n        self.input.is_empty() && self.output.is_empty()\n    }\n}\n")),(0,a.kt)("h2",{id:"768-\u6700\u591a\u80fd\u5b8c\u6210\u6392\u5e8f\u7684\u5757-ii"},(0,a.kt)("a",{parentName:"h2",href:"https://leetcode-cn.com/problems/max-chunks-to-make-sorted-ii/"},"768. \u6700\u591a\u80fd\u5b8c\u6210\u6392\u5e8f\u7684\u5757 II")),(0,a.kt)("p",null,"4 \u6708 6 \u65e5"),(0,a.kt)("h3",{id:"\u601d\u8def-5"},"\u601d\u8def"),(0,a.kt)("p",null,"\u524d\u7f00\u548c"),(0,a.kt)("h3",{id:"\u4ee3\u7801-5"},"\u4ee3\u7801"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"var maxChunksToSorted = function (arr) {\n  let sum1 = 0;\n  let sum2 = 0;\n  let ans = 0;\n  let arr2 = [...arr].sort((a, b) => a - b);\n  for (let i in arr) {\n    sum1 = sum1 + arr[i];\n    sum2 = sum2 + arr2[i];\n    if (sum1 == sum2) {\n      ans += 1;\n      sum1 = 0;\n      sum2 = 0;\n    }\n  }\n  return ans;\n};\n")),(0,a.kt)("h3",{id:"\u590d\u6742\u5ea6-4"},"\u590d\u6742\u5ea6"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)"),(0,a.kt)("li",{parentName:"ul"},"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)")),(0,a.kt)("h3",{id:"rust-\u7248\u672c-5"},"rust \u7248\u672c"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"impl Solution {\n    pub fn max_chunks_to_sorted(arr: Vec<i32>) -> i32 {\n        let mut sum1 = 0;\n        let mut sum2 = 0;\n        let mut ans = 0;\n        let mut arr_sorted = arr.to_vec();\n        arr_sorted.sort();\n        for i in 0..arr.len() {\n            sum1 = sum1 + arr[i];\n            sum2 = sum2 + arr_sorted[i];\n            if sum1 == sum2 {\n                ans += 1;\n                sum1 = 0;\n                sum2 = 0;\n            }\n        }\n        ans\n    }\n}\n")),(0,a.kt)("h2",{id:"61-\u65cb\u8f6c\u94fe\u8868"},(0,a.kt)("a",{parentName:"h2",href:"https://leetcode-cn.com/problems/rotate-list/"},"61. \u65cb\u8f6c\u94fe\u8868")),(0,a.kt)("p",null,"4 \u6708 7 \u65e5"),(0,a.kt)("h3",{id:"\u601d\u8def-6"},"\u601d\u8def"),(0,a.kt)("p",null,"\u5c06\u540e k \u4e2a\u540e\u9762\u63a5\u4e0a\u524d n-k \u4e2a\u8282\u70b9"),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://pic.rmb.bdstatic.com/bjh/b8afad81f7caec9df5cfd245a7cd14af.png",alt:"image.png"})),(0,a.kt)("h3",{id:"\u4ee3\u7801-6"},"\u4ee3\u7801"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"var rotateRight = function (head, k) {\n  let curNode = new ListNode(0, head);\n  let count = 0;\n  // \u94fe\u8868\u957f\u5ea6\n  while (curNode.next) {\n    curNode = curNode.next;\n    count++;\n  }\n  // \u8003\u8651\u5230 k \u53ef\u80fd\u5f88\u5927\n  let n = k % count;\n  let p = new ListNode(0, head);\n  // \u627e\u5230\u7b2c n-k \u7684\u4f4d\u7f6e\n  for (let i = 0; i < count - n; i++) {\n    p = p.next;\n  }\n  curNode.next = head;\n  head = p.next;\n  p.next = null;\n  return head;\n};\n")),(0,a.kt)("h3",{id:"\u590d\u6742\u5ea6-5"},"\u590d\u6742\u5ea6"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)"),(0,a.kt)("li",{parentName:"ul"},"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)")),(0,a.kt)("h3",{id:"rust-\u7248\u672c-6"},"rust \u7248\u672c"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"impl Solution {\n    pub fn rotate_right(head: Option<Box<ListNode>>, k: i32) -> Option<Box<ListNode>> {\n        let mut v: Vec<i32> = Vec::new();\n        let mut node = &head;\n        // \u83b7\u53d6\u603b\u957f\u5ea6\n        while let Some(n) = node {\n            v.push(n.val);\n            node = &n.next;\n        }\n        // \u7f13\u5b58\u65b0\u94fe\u8868\n        let mut answer = None;\n        // \u6784\u5efa\u94fe\u8868\n        for i in (0..v.len()).rev() {\n            let j = k as usize % v.len();\n            answer = Some(Box::new(ListNode {\n                val: v[(v.len() + i - j) % v.len()],\n                next: answer,\n            }))\n        }\n        answer\n    }\n}\n")),(0,a.kt)("h2",{id:"24-\u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9"},(0,a.kt)("a",{parentName:"h2",href:"https://leetcode-cn.com/problems/swap-nodes-in-pairs/"},"24. \u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9")),(0,a.kt)("p",null,"4 \u6708 8 \u65e5"),(0,a.kt)("h3",{id:"\u601d\u8def-7"},"\u601d\u8def"),(0,a.kt)("p",null,"rust \u5199\u94fe\u8868\u9898\u5f88\u4e0d\u65b9\u4fbf\uff0c\u540c\u4e00\u65f6\u523b\uff0c\u53ea\u80fd\u62e5\u6709\u4e00\u4e2a\u53ef\u53d8\u5f15\u7528\uff0c\u6240\u4ee5\u4e0b\u9762\u7684\u4ee3\u7801\u6ca1\u529e\u6cd5\u7f16\u8bd1\u901a\u8fc7\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"let mut prev = head;\nlet mut current = prev.next.unwrap();\n")),(0,a.kt)("p",null,"\u6240\u4ee5\u9700\u8981\u5229\u7528 ",(0,a.kt)("inlineCode",{parentName:"p"},"take()")," \u53d6\u51fa ",(0,a.kt)("inlineCode",{parentName:"p"},"Option<T>")," \u540e\u5728\u539f\u6765\u4f4d\u7f6e\u653e\u5165 None \u6765\u201c\u6253\u65ad\u201d\u94fe\u8868\uff0c\u8fd9\u6837\u5c31\u80fd\u83b7\u5f97\u4e24\u4e2a\u62e5\u6709\u6240\u6709\u6743\u7684\u53d8\u91cf\uff0c\u4e00\u4e2a\u662f\u524d\u9762\u90e8\u5206\uff0c\u4e00\u4e2a\u662f\u540e\u9762\u90e8\u5206"),(0,a.kt)("h3",{id:"\u4ee3\u7801-7"},"\u4ee3\u7801"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"var swapPairs = function (head) {\n  const dummy = new ListNode(0);\n  dummy.next = head;\n  let pre = dummy;\n  while (head && head.next) {\n    // \u4e34\u65f6\u4fdd\u5b58head.next\uff0c\u56e0\u4e3ahead.next\u5f85\u4f1a\u8981\u6539\u53d8\n    let next = head.next;\n    head.next = next.next;\n    next.next = head;\n    pre.next = next;\n    // \u6307\u9488\u66f4\u65b0 \u5148\u53d8pre\n    pre = head;\n    head = head.next;\n  }\n  return dummy.next;\n};\n")),(0,a.kt)("h3",{id:"\u590d\u6742\u5ea6-6"},"\u590d\u6742\u5ea6"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)"),(0,a.kt)("li",{parentName:"ul"},"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)")),(0,a.kt)("h3",{id:"rust-\u7248\u672c-7"},"rust \u7248\u672c"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"impl Solution {\n  pub fn swap_pairs(mut head: Option<Box<ListNode>>) -> Option<Box<ListNode>> {\n    let mut list = ListNode::new(0);\n    let mut tail = &mut list.next;\n    let mut temp = None;\n    while let Some(mut node) = head.take() {\n        head = node.next.take();\n\n        match temp.take() {\n            None => temp = Some(node),\n            Some(temp) => {\n                node.next = Some(temp);\n                *tail = Some(node);\n                tail = &mut tail.as_mut().unwrap().next.as_mut().unwrap().next;\n            }\n        }\n    }\n    *tail = temp;\n    list.next.take()\n  }\n}\n")),(0,a.kt)("h2",{id:"109-\u6709\u5e8f\u94fe\u8868\u8f6c\u6362\u4e8c\u53c9\u641c\u7d22\u6811"},(0,a.kt)("a",{parentName:"h2",href:"https://leetcode-cn.com/problems/convert-sorted-list-to-binary-search-tree/"},"109. \u6709\u5e8f\u94fe\u8868\u8f6c\u6362\u4e8c\u53c9\u641c\u7d22\u6811")),(0,a.kt)("p",null,"4 \u6708 9 \u65e5"),(0,a.kt)("h3",{id:"\u601d\u8def-8"},"\u601d\u8def"),(0,a.kt)("p",null,"\u9012\u5f52\u6570\u7ec4\uff0c\u53d6\u4e2d\u95f4\u8282\u70b9\uff0c\u6784\u5efa bst"),(0,a.kt)("h3",{id:"\u4ee3\u7801-8"},"\u4ee3\u7801"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"var sortedListToBST = function (head) {\n  const arr = [];\n  while (head) {\n    arr.push(head.val);\n    head = head.next;\n  }\n  const buildBst = (arr) => {\n    if (arr.length == 0) return null;\n    let mid = Math.floor(arr.length / 2);\n    const root = new TreeNode(arr[mid]);\n    root.left = buildBst(arr.slice(0, mid));\n    root.right = buildBst(arr.slice(mid + 1));\n    return root;\n  };\n  return buildBst(arr);\n};\n")),(0,a.kt)("h3",{id:"\u590d\u6742\u5ea6-7"},"\u590d\u6742\u5ea6"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)"),(0,a.kt)("li",{parentName:"ul"},"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(logn)")),(0,a.kt)("h3",{id:"rust-\u7248\u672c-8"},"rust \u7248\u672c"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"use std::cell::RefCell;\nuse std::rc::Rc;\nimpl Solution {\n    pub fn sorted_list_to_bst(mut head: Option<Box<ListNode>>) -> Option<Rc<RefCell<TreeNode>>> {\n        let mut stack = Vec::new();\n        // \u6536\u96c6\u94fe\u8868\u8282\u70b9\u503c\n        while let Some(node) = head {\n            stack.push(node.val);\n            head = node.next;\n        }\n        Solution::s(&stack[..])\n    }\n    pub fn s(nums: &[i32]) -> Option<Rc<RefCell<TreeNode>>> {\n        let mut n = nums.len();\n        if n == 0 {\n            return None;\n        }\n        let mid = n / 2;\n        let mut node = TreeNode::new(nums[mid]);\n        // \u9012\u5f52\u521b\u5efa\u5de6\u5b50\u6811\n        node.left = Solution::s(&nums[..mid]);\n        // \u9012\u5f52\u521b\u5efa\u53f3\u5b50\u6811\n        node.right = Solution::s(&nums[mid + 1..]);\n        Some(Rc::new(RefCell::new(node)))\n    }\n}\n")),(0,a.kt)("h2",{id:"160-\u76f8\u4ea4\u94fe\u8868"},(0,a.kt)("a",{parentName:"h2",href:"https://leetcode-cn.com/problems/intersection-of-two-linked-lists/"},"160. \u76f8\u4ea4\u94fe\u8868")),(0,a.kt)("p",null,"4 \u6708 10 \u65e5"),(0,a.kt)("h3",{id:"\u601d\u8def-9"},"\u601d\u8def"),(0,a.kt)("p",null,"\u53cc\u6307\u9488\uff0c\u4e24\u4e2a\u6307\u9488\u7684\u904d\u5386\u603b\u957f\u5ea6\u662f\u4e00\u6837\u7684"),(0,a.kt)("h3",{id:"\u4ee3\u7801-9"},"\u4ee3\u7801"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"var getIntersectionNode = function (headA, headB) {\n  let a = headA,\n    b = headB;\n  while (a !== b) {\n    a = a === null ? headB : a.next;\n    b = b === null ? headA : b.next;\n  }\n  return a;\n};\n")),(0,a.kt)("h3",{id:"\u590d\u6742\u5ea6-8"},"\u590d\u6742\u5ea6"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(m+n)\uff0c\u5176\u4e2d m \u548c n \u662f\u5206\u522b\u662f\u94fe\u8868 headA \u548c headB \u7684\u957f\u5ea6\u3002\u4e24\u4e2a\u6307\u9488\u540c\u65f6\u904d\u5386\u4e24\u4e2a\u94fe\u8868\uff0c\u6bcf\u4e2a\u6307\u9488\u904d\u5386\u4e24\u4e2a\u94fe\u8868\u5404\u4e00\u6b21"),(0,a.kt)("li",{parentName:"ul"},"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a0(1)")),(0,a.kt)("h2",{id:"142-\u73af\u5f62\u94fe\u8868-ii"},(0,a.kt)("a",{parentName:"h2",href:"https://leetcode-cn.com/problems/linked-list-cycle-ii/"},"142. \u73af\u5f62\u94fe\u8868 II")),(0,a.kt)("p",null,"4 \u6708 11 \u65e5"),(0,a.kt)("h3",{id:"\u601d\u8def-10"},"\u601d\u8def"),(0,a.kt)("p",null,"\u5feb\u6162\u6307\u9488\uff0cslow \u8d70 1 \u6b65\uff0cfast \u8d70 2 \u6b65\uff0c\u5047\u8bbe\u6700\u7ec8\u76f8\u9047 slow \u8d70\u4e86 k \u6b65\uff0c\u5219 fast \u8d70\u4e86 2k \u6b65\uff0c\u4ece head \u5230\u5165\u73af\u70b9\u662f k-m\uff0c\u4ece\u5165\u73af\u70b9\u5230\u76f8\u9047\u70b9\u662f m\uff0c\u6240\u4ee5 fast \u4ece\u76f8\u9047\u70b9\u518d\u5230\u5165\u73af\u70b9\u8d70\u4e86 k-m"),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://tva2.sinaimg.cn/large/006T9etDly1h15qy1rhifj310u0nitd2.jpg",alt:"image"})),(0,a.kt)("h3",{id:"\u4ee3\u7801-10"},"\u4ee3\u7801"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"var detectCycle = function (head) {\n  let slow = head;\n  let fast = head;\n  while (fast) {\n    if (fast.next == null) {\n      // fast.next\u8d70\u51fa\u94fe\u8868\u4e86\uff0c\u8bf4\u660e\u65e0\u73af\n      return null;\n    }\n    slow = slow.next;\n    fast = fast.next.next;\n    if (slow == fast) {\n      fast = head;\n      while (true) {\n        if (slow == fast) {\n          return slow;\n        }\n        slow = slow.next;\n        fast = fast.next;\n      }\n    }\n  }\n  return null;\n};\n")),(0,a.kt)("h3",{id:"\u590d\u6742\u5ea6-9"},"\u590d\u6742\u5ea6"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)"),(0,a.kt)("li",{parentName:"ul"},"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)")),(0,a.kt)("h2",{id:"146-lru-\u7f13\u5b58"},(0,a.kt)("a",{parentName:"h2",href:"https://leetcode-cn.com/problems/lru-cache/"},"146. LRU \u7f13\u5b58")),(0,a.kt)("p",null,"4 \u6708 12 \u65e5"),(0,a.kt)("h3",{id:"\u601d\u8def-11"},"\u601d\u8def"),(0,a.kt)("p",null,"\u5229\u7528 Map \u6765\u505a\uff0c\u65b0\u7684 k-v \u653e\u5230\u672b\u5c3e\uff0c\u5934\u90e8\u5c31\u662f\u6700\u8fd1\u6700\u4e45\u4f7f\u7528\u7684\u503c\uff0c\u53ef\u4ee5\u5229\u7528 map.keys()\u62ff\u5230\u5934\u90e8\u7684 k"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u5229\u7528 map \u6765\u4fdd\u5b58\u6570\u636e",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"get\uff1a\u8bbf\u95ee key\uff0c\u8bbf\u95ee\u5b8c\u5c06\u5176\u653e\u5728\u6700\u540e\u3002\u6240\u4ee5\uff0c\u82e5 key \u5b58\u5728\uff0c\u5148\u4fdd\u5b58 value \u503c\uff0c\u5220\u9664 key\uff0c\u518d\u6dfb\u52a0 key\uff0c\u6700\u540e\u8fd4\u56de\u4fdd\u5b58\u7684 value \u503c\u3002\u82e5 key \u4e0d\u5b58\u5728\uff0c\u8fd4\u56de-1"),(0,a.kt)("li",{parentName:"ul"},"put\uff1a\u65b0\u589e key\uff0c\u5c06\u5176\u653e\u5728\u6700\u540e\u3002\u6240\u4ee5\uff0c\u82e5 key \u5b58\u5728\uff0c\u5148\u5220\u9664\uff0c\u518d\u6dfb\u52a0\u3002\u5982\u679c\u5bb9\u91cf\u8d85\u51fa\u8303\u56f4\u4e86\uff0c\u5c06 map \u4e2d\u7684\u5934\u90e8\u5220\u9664\u3002")))),(0,a.kt)("p",null,"\u5173\u952e\u5728\u4e8e\u5220\u9664 map \u4e2d\u7684\u5934\u90e8 key\uff1a"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"map.keys()\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668"),(0,a.kt)("li",{parentName:"ul"},"\u8fed\u4ee3\u5668\u8c03\u7528 next \u65b9\u6cd5\uff0c\u8fd4\u56de value \u5b57\u6bb5\u548c done \u5b57\u6bb5\u7ec4\u6210\u7684\u5bf9\u8c61")),(0,a.kt)("h3",{id:"\u4ee3\u7801-11"},"\u4ee3\u7801"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"var LRUCache = function (capacity) {\n  this.capacity = capacity;\n  this.map = new Map();\n};\n\nLRUCache.prototype.get = function (key) {\n  if (this.map.has(key)) {\n    const temp = this.map.get(key);\n    this.map.delete(key);\n    this.map.set(key, temp);\n    return temp;\n  }\n  return -1;\n};\n\nLRUCache.prototype.put = function (key, value) {\n  // \u8981\u5c06\u5176\u653e\u5728\u6700\u540e\uff0c\u6240\u4ee5\u82e5\u5b58\u5728key\uff0c\u5148\u5220\u9664\n  if (this.map.has(key)) this.map.delete(key);\n  // \u8bbe\u7f6ekey\u3001value\n  this.map.set(key, value);\n  if (this.map.size > this.capacity) {\n    this.map.delete(this.map.keys().next().value);\n  }\n};\n")),(0,a.kt)("h3",{id:"\u590d\u6742\u5ea6-10"},"\u590d\u6742\u5ea6"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(1)"),(0,a.kt)("li",{parentName:"ul"},"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)")),(0,a.kt)("h2",{id:"104-\u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6"},(0,a.kt)("a",{parentName:"h2",href:"https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/"},"104. \u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6")),(0,a.kt)("p",null,"4 \u6708 13 \u65e5"),(0,a.kt)("h3",{id:"\u601d\u8def-12"},"\u601d\u8def"),(0,a.kt)("p",null,"DFS \u548c BFS"),(0,a.kt)("h3",{id:"\u4ee3\u7801-12"},"\u4ee3\u7801"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"// \u672c\u8d28\u4e0a\u5c31\u662f\u4e00\u4e2a\u5c42\u5e8f\u904d\u5386\nvar maxDepth = function (root) {\n  if (!root) return 0;\n  const queue = [root];\n  let depth = 1;\n  while (queue.length) {\n    let len = queue.length;\n    // \u6536\u96c6\u6bcf\u4e00\u5c42\u7684\u8282\u70b9\n    for (let i = 0; i < len; i++) {\n      const top = queue.shift();\n      if (top.left) {\n        queue.push(top.left);\n      }\n      if (top.right) {\n        queue.push(top.right);\n      }\n    }\n    // \u53ea\u8981\u6709\u6536\u96c6\u7684\u8282\u70b9\u5c31\u8bf4\u660e\u5c42\u6570+1\n    queue.length && depth++;\n  }\n  return depth;\n};\n")),(0,a.kt)("h3",{id:"\u590d\u6742\u5ea6-11"},"\u590d\u6742\u5ea6"),(0,a.kt)("p",null,"\u5bf9\u4e8e dfs\uff1a"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u5176\u4e2d n \u4e3a\u4e8c\u53c9\u6811\u8282\u70b9\u7684\u4e2a\u6570\u3002\u6bcf\u4e2a\u8282\u70b9\u5728\u9012\u5f52\u4e2d\u53ea\u88ab\u904d\u5386\u4e00\u6b21"),(0,a.kt)("li",{parentName:"ul"},"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(maxHeight)\uff0c\u5176\u4e2d maxHeight \u8868\u793a\u4e8c\u53c9\u6811\u7684\u9ad8\u5ea6\u3002\u9012\u5f52\u51fd\u6570\u9700\u8981\u6808\u7a7a\u95f4\uff0c\u800c\u6808\u7a7a\u95f4\u53d6\u51b3\u4e8e\u9012\u5f52\u7684\u6df1\u5ea6\uff0c\u56e0\u6b64\u7a7a\u95f4\u590d\u6742\u5ea6\u7b49\u4ef7\u4e8e\u4e8c\u53c9\u6811\u7684\u9ad8\u5ea6")),(0,a.kt)("p",null,"\u5bf9\u4e8e bfs\uff1a"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u5176\u4e2d n \u4e3a\u4e8c\u53c9\u6811\u7684\u8282\u70b9\u4e2a\u6570\u3002\u6bcf\u4e2a\u8282\u70b9\u53ea\u4f1a\u88ab\u8bbf\u95ee\u4e00\u6b21"),(0,a.kt)("li",{parentName:"ul"},"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a\u6b64\u65b9\u6cd5\u7a7a\u95f4\u7684\u6d88\u8017\u53d6\u51b3\u4e8e\u961f\u5217\u5b58\u50a8\u7684\u5143\u7d20\u6570\u91cf\uff0c\u5176\u5728\u6700\u574f\u60c5\u51b5\u4e0b\u4f1a\u8fbe\u5230 O(n)")),(0,a.kt)("h3",{id:"rust-\u7248\u672c-9"},"rust \u7248\u672c"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"use std::rc::Rc;\nuse std::cell::RefCell;\nuse std::cmp::max;\nimpl Solution {\n    pub fn max_depth(root: Option<Rc<RefCell<TreeNode>>>) -> i32 {\n        let mut max_val = 0;\n\n        if let Some(node) = root {\n            let left = 1 + Solution::max_depth(node.borrow_mut().left.take());\n            let right = 1 + Solution::max_depth(node.borrow_mut().right.take());\n\n            max_val = max(left, right);\n        }\n\n        max_val\n    }\n}\n")),(0,a.kt)("h2",{id:"100-\u76f8\u540c\u7684\u6811"},(0,a.kt)("a",{parentName:"h2",href:"https://leetcode-cn.com/problems/same-tree/"},"100. \u76f8\u540c\u7684\u6811")),(0,a.kt)("p",null,"4 \u6708 14 \u65e5"),(0,a.kt)("h3",{id:"\u601d\u8def-13"},"\u601d\u8def"),(0,a.kt)("p",null,"dfs"),(0,a.kt)("h3",{id:"\u4ee3\u7801-13"},"\u4ee3\u7801"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"var isSameTree = function (p, q) {\n  if (p == null && q == null) {\n    return true;\n  }\n  if (p == null || q == null) {\n    return false;\n  }\n  if (p.val != q.val) {\n    return false;\n  }\n  return isSameTree(p.left, q.left) && isSameTree(p.right, q.right);\n};\n")),(0,a.kt)("h3",{id:"\u590d\u6742\u5ea6-12"},"\u590d\u6742\u5ea6"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(min(m,n))\uff0c\u5176\u4e2d m \u548c n \u5206\u522b\u662f\u4e24\u4e2a\u4e8c\u53c9\u6811\u7684\u8282\u70b9\u6570\u3002\u5bf9\u4e24\u4e2a\u4e8c\u53c9\u6811\u540c\u65f6\u8fdb\u884c\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff0c\u53ea\u6709\u5f53\u4e24\u4e2a\u4e8c\u53c9\u6811\u4e2d\u7684\u5bf9\u5e94\u8282\u70b9\u90fd\u4e0d\u4e3a\u7a7a\u65f6\u624d\u4f1a\u8bbf\u95ee\u5230\u8be5\u8282\u70b9\uff0c\u56e0\u6b64\u88ab\u8bbf\u95ee\u5230\u7684\u8282\u70b9\u6570\u4e0d\u4f1a\u8d85\u8fc7\u8f83\u5c0f\u7684\u4e8c\u53c9\u6811\u7684\u8282\u70b9\u6570")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(min(m,n))\uff0c\u5176\u4e2d m \u548c n \u5206\u522b\u662f\u4e24\u4e2a\u4e8c\u53c9\u6811\u7684\u8282\u70b9\u6570\u3002\u7a7a\u95f4\u590d\u6742\u5ea6\u53d6\u51b3\u4e8e\u9012\u5f52\u8c03\u7528\u7684\u5c42\u6570\uff0c\u9012\u5f52\u8c03\u7528\u7684\u5c42\u6570\u4e0d\u4f1a\u8d85\u8fc7\u8f83\u5c0f\u7684\u4e8c\u53c9\u6811\u7684\u6700\u5927\u9ad8\u5ea6\uff0c\u6700\u574f\u60c5\u51b5\u4e0b\uff0c\u4e8c\u53c9\u6811\u7684\u9ad8\u5ea6\u7b49\u4e8e\u8282\u70b9\u6570"))),(0,a.kt)("h3",{id:"rust-\u7248\u672c-10"},"rust \u7248\u672c"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"use std::cell::RefCell;\nuse std::rc::Rc;\nimpl Solution {\n    pub fn is_same_tree(\n        p: Option<Rc<RefCell<TreeNode>>>,\n        q: Option<Rc<RefCell<TreeNode>>>,\n    ) -> bool {\n        Solution::is_same_tree_impl(&p, &q)\n    }\n    pub fn is_same_tree_impl(\n        p: &Option<Rc<RefCell<TreeNode>>>,\n        q: &Option<Rc<RefCell<TreeNode>>>,\n    ) -> bool {\n        if p.is_none() && q.is_none() {\n            return true;\n        }\n        if p.is_none() || q.is_none() {\n            return false;\n        }\n        let a: &TreeNode = &p.as_ref().unwrap().borrow();\n        let b: &TreeNode = &q.as_ref().unwrap().borrow();\n\n        if a.val != b.val {\n            return false;\n        }\n        Solution::is_same_tree_impl(&a.left, &b.left)\n            && Solution::is_same_tree_impl(&a.right, &b.right)\n    }\n}\n")),(0,a.kt)("h2",{id:"129-\u6c42\u6839\u8282\u70b9\u5230\u53f6\u8282\u70b9\u6570\u5b57\u4e4b\u548c"},(0,a.kt)("a",{parentName:"h2",href:"https://leetcode-cn.com/problems/sum-root-to-leaf-numbers/"},"129. \u6c42\u6839\u8282\u70b9\u5230\u53f6\u8282\u70b9\u6570\u5b57\u4e4b\u548c")),(0,a.kt)("p",null,"4 \u6708 15 \u65e5"),(0,a.kt)("h3",{id:"\u601d\u8def-14"},"\u601d\u8def"),(0,a.kt)("p",null,"DFS"),(0,a.kt)("h3",{id:"\u4ee3\u7801-14"},"\u4ee3\u7801"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"var sumNumbers = function (root) {\n  const calcTree = (node, cur) => {\n    if (node === null) {\n      return 0;\n    }\n    cur = 10 * cur + node.val;\n    if (node.left === null && node.right === null) {\n      return cur;\n    }\n    return calcTree(node.left, cur) + calcTree(node.right, cur);\n  };\n  return calcTree(root, 0);\n};\n")),(0,a.kt)("h3",{id:"\u590d\u6742\u5ea6-13"},"\u590d\u6742\u5ea6"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u5176\u4e2d n \u662f\u4e8c\u53c9\u6811\u7684\u8282\u70b9\u4e2a\u6570\u3002\u5bf9\u6bcf\u4e2a\u8282\u70b9\u8bbf\u95ee\u4e00\u6b21\u3002"),(0,a.kt)("li",{parentName:"ul"},"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u5176\u4e2d n \u662f\u4e8c\u53c9\u6811\u7684\u8282\u70b9\u4e2a\u6570\u3002\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3b\u8981\u53d6\u51b3\u4e8e\u9012\u5f52\u8c03\u7528\u7684\u6808\u7a7a\u95f4\uff0c\u9012\u5f52\u6808\u7684\u6df1\u5ea6\u7b49\u4e8e\u4e8c\u53c9\u6811\u7684\u9ad8\u5ea6\uff0c\u6700\u574f\u60c5\u51b5\u4e0b\uff0c\u4e8c\u53c9\u6811\u7684\u9ad8\u5ea6\u7b49\u4e8e\u8282\u70b9\u4e2a\u6570\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a O(n)\u3002")),(0,a.kt)("h3",{id:"rust-\u7248\u672c-11"},"rust \u7248\u672c"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"use std::cell::RefCell;\nuse std::rc::Rc;\nimpl Solution {\n    pub fn sum_numbers(root: Option<Rc<RefCell<TreeNode>>>) -> i32 {\n        let mut res = 0;\n        let mut stack = vec![(root, 0)];\n\n        while let Some(node_sum) = stack.pop() {\n            if let Some(node) = node_sum.0 {\n                let node = node.borrow();\n                let cur_sum = 10 * node_sum.1 + node.val;\n\n                if node.left.is_none() && node.right.is_none() {\n                    res += cur_sum;\n                    continue;\n                }\n\n                stack.push((node.left.clone(), cur_sum));\n                stack.push((node.right.clone(), cur_sum));\n            }\n        }\n        res\n    }\n}\n")),(0,a.kt)("h2",{id:"513-\u627e\u6811\u5de6\u4e0b\u89d2\u7684\u503c"},(0,a.kt)("a",{parentName:"h2",href:"https://leetcode-cn.com/problems/find-bottom-left-tree-value/"},"513. \u627e\u6811\u5de6\u4e0b\u89d2\u7684\u503c")),(0,a.kt)("p",null,"4 \u6708 16 \u65e5"),(0,a.kt)("h3",{id:"\u601d\u8def-15"},"\u601d\u8def"),(0,a.kt)("p",null,"bfs"),(0,a.kt)("h3",{id:"\u4ee3\u7801-15"},"\u4ee3\u7801"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"var findBottomLeftValue = function (root) {\n  if (!root) return null;\n  const queue = [root];\n  let Left;\n  while (queue.length) {\n    let curLevel = queue.length;\n    Left = queue[0];\n    for (let i = 0; i < curLevel; i++) {\n      let curNode = queue.shift();\n\n      curNode.left && queue.push(curNode.left);\n      curNode.right && queue.push(curNode.right);\n    }\n  }\n  return Left.val;\n};\n")),(0,a.kt)("h3",{id:"\u590d\u6742\u5ea6-14"},"\u590d\u6742\u5ea6"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u8282\u70b9\u4e2a\u6570\uff0c\u5bf9\u6bcf\u4e2a\u8282\u70b9\u8bbf\u95ee\u4e00\u6b21"),(0,a.kt)("li",{parentName:"ul"},"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(max_size)\uff0c\u5c42\u6700\u5927\u5bbd\u5ea6")),(0,a.kt)("h2",{id:"297-\u4e8c\u53c9\u6811\u7684\u5e8f\u5217\u5316\u4e0e\u53cd\u5e8f\u5217\u5316"},(0,a.kt)("a",{parentName:"h2",href:"https://leetcode-cn.com/problems/serialize-and-deserialize-binary-tree/"},"297. \u4e8c\u53c9\u6811\u7684\u5e8f\u5217\u5316\u4e0e\u53cd\u5e8f\u5217\u5316")),(0,a.kt)("p",null,"4 \u6708 17 \u65e5"),(0,a.kt)("h3",{id:"\u601d\u8def-16"},"\u601d\u8def"),(0,a.kt)("p",null,"dfs"),(0,a.kt)("h3",{id:"\u4ee3\u7801-16"},"\u4ee3\u7801"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'var serialize = function (root) {\n  if (root == null) {\n    return "X";\n  }\n  let left = serialize(root.left);\n  let right = serialize(root.right);\n  return root.val + "," + left + "," + right;\n};\n\nvar deserialize = function (data) {\n  const arr = data.split(",");\n  const builtTree = (node) => {\n    let front = arr.shift();\n    if (front == "X") {\n      return null;\n    }\n    let root = new TreeNode(front);\n    root.left = builtTree(root);\n    root.right = builtTree(root);\n    return root;\n  };\n  return builtTree(arr);\n};\n')),(0,a.kt)("h3",{id:"\u590d\u6742\u5ea6-15"},"\u590d\u6742\u5ea6"),(0,a.kt)("p",null,"n \u4e3a\u8282\u70b9\u7684\u6570\u91cf"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u6bcf\u4e2a\u8282\u70b9\u8bbf\u95ee\u4e00\u6b21"),(0,a.kt)("li",{parentName:"ul"},"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)")),(0,a.kt)("h2",{id:"987-\u4e8c\u53c9\u6811\u7684\u5782\u5e8f\u904d\u5386"},(0,a.kt)("a",{parentName:"h2",href:"https://leetcode-cn.com/problems/vertical-order-traversal-of-a-binary-tree/"},"987. \u4e8c\u53c9\u6811\u7684\u5782\u5e8f\u904d\u5386")),(0,a.kt)("p",null,"4 \u6708 18 \u65e5"),(0,a.kt)("h3",{id:"\u601d\u8def-17"},"\u601d\u8def"),(0,a.kt)("p",null,"\u8fd9\u4e2a\u9898\u7684\u91cd\u70b9\u5728\u4e8e\u6392\u5e8f\uff0c\u89c2\u5bdf\u9898\u76ee\u53ef\u77e5\uff0c\u5750\u6807\u53cd\u6620\u7684\u662f ",(0,a.kt)("inlineCode",{parentName:"p"},"(depth,order)"),"\uff0c\u6211\u4eec\u9700\u8981\u5bf9 order \u5347\u5e8f\uff0corder \u4e00\u6837\u7684\uff08\u662f\u4e00\u7ec4\uff09\u6309 depth \u5347\u5e8f\uff0cdepth \u4e00\u6837\u7684\u6309 ",(0,a.kt)("inlineCode",{parentName:"p"},"node.val")," \u5347\u5e8f"),(0,a.kt)("h3",{id:"\u4ee3\u7801-17"},"\u4ee3\u7801"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"// \u5750\u6807\u662f (depth,order)\nvar verticalTraversal = function (root) {\n  if (!root) return [];\n  let queue = [[root, 0, 0]];\n  // map\u7f13\u5b58\u7684\u662f order, [[node, depth],[node, depth]]\n  let map = new Map();\n  let min = Infinity;\n  let max = -Infinity;\n  let finalArr = [];\n  while (queue.length > 0) {\n    let first = queue.pop();\n    let node = first[0];\n    let order = first[2];\n    let depth = first[1];\n    min = Math.min(order, min);\n    max = Math.max(order, max);\n    if (map.has(order)) {\n      let arr = map.get(order);\n      arr.push([node, depth]);\n      map.set(order, arr);\n    } else {\n      map.set(order, [[node, depth]]);\n    }\n    if (node.left) {\n      queue.unshift([node.left, depth + 1, order - 1]);\n    }\n    if (node.right) {\n      queue.unshift([node.right, depth + 1, order + 1]);\n    }\n  }\n  for (let i = min; i <= max; i++) {\n    let arr = map.get(i);\n    arr.sort((a, b) => {\n      // \u5982\u679cdepth\u76f8\u540c\uff0c\u5c31\u6309\u7167 node.val \u5347\u5e8f\u6392\u5217\n      if (a[1] === b[1]) {\n        return a[0].val - b[0].val;\n      }\n      // \u5426\u5219\u5c31\u6309\u7740 depth \u5347\u5e8f\u6392\u5217\n      return a[1] - b[1];\n    });\n    // \u6211\u4eec\u6700\u540e\u8981\u7f13\u5b58\u7684\u53ea\u662f node.val\n    arr = arr.map((elem) => elem[0].val);\n    finalArr.push(arr);\n  }\n  return finalArr;\n};\n")),(0,a.kt)("h3",{id:"\u590d\u6742\u5ea6-16"},"\u590d\u6742\u5ea6"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(nlogn)\uff0c\u8003\u8651\u5230 sort \u64cd\u4f5c\u662f O(nlogn)\uff0c O(n) < O(nlogn)"),(0,a.kt)("li",{parentName:"ul"},"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)")),(0,a.kt)("h2",{id:"1-\u4e24\u6570\u4e4b\u548c"},(0,a.kt)("a",{parentName:"h2",href:"https://leetcode-cn.com/problems/two-sum/"},"1. \u4e24\u6570\u4e4b\u548c")),(0,a.kt)("p",null,"4 \u6708 19 \u65e5"),(0,a.kt)("h3",{id:"\u601d\u8def-18"},"\u601d\u8def"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u66b4\u529b \uff08\u540e\u9762\u53ef\u4ee5\u4f18\u5316\u6210 \u6392\u5e8f+\u53cc\u6307\u9488 \u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662f O(nlogn)\uff09"),(0,a.kt)("li",{parentName:"ul"},"HashMap")),(0,a.kt)("h3",{id:"\u4ee3\u7801-18"},"\u4ee3\u7801"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"var twoSum = function (nums, target) {\n  const len = nums.length;\n  for (let i = 0; i < len; i++) {\n    let l = i;\n    let r = len - 1;\n    while (l < r) {\n      if (nums[l] + nums[r] === target) {\n        return [l, r];\n      }\n      r--;\n    }\n  }\n};\n\nconst twoSum = (nums, target) => {\n  const prevNums = {};\n\n  for (let i = 0; i < nums.length; i++) {\n    const curNum = nums[i];\n    const targetNum = target - curNum; // key\n    const targetNumIndex = prevNums[targetNum]; // value\n    if (targetNumIndex !== undefined) {\n      return [targetNumIndex, i];\n    } else {\n      prevNums[curNum] = i;\n    }\n  }\n};\n")),(0,a.kt)("h3",{id:"\u590d\u6742\u5ea6-17"},"\u590d\u6742\u5ea6"),(0,a.kt)("p",null,"\u66b4\u529b\u89e3\u6cd5\uff1a"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)"),(0,a.kt)("li",{parentName:"ul"},"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)")),(0,a.kt)("p",null,"HashMap \u89e3\u6cd5\uff1a"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)"),(0,a.kt)("li",{parentName:"ul"},"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)")),(0,a.kt)("h3",{id:"rust-\u7248\u672c-12"},"rust \u7248\u672c"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"// \u66b4\u529b\nimpl Solution {\n    pub fn two_sum(nums: Vec<i32>, target: i32) -> Vec<i32> {\n        let len = nums.len();\n        for i in 0..len {\n            let mut left = i;\n            let mut right = len - 1;\n            while left < right {\n                if nums[left] + nums[right] == target {\n                    return vec![left as i32, right as i32];\n                }\n                right = right - 1;\n            }\n        }\n        Vec::new()\n    }\n}\n\n// hashmap\nuse std::collections::HashMap;\n\nimpl Solution {\n    pub fn two_sum(nums: Vec<i32>, target: i32) -> Vec<i32> {\n        let mut map = HashMap::new();\n\n        for i in 0..nums.len() {\n            if let Some(val) = map.get(&(target - nums[i])) {\n                if i != *val {\n                    return vec![i as i32, *val as i32];\n                }\n            }\n            map.insert(nums[i], i);\n        }\n        Vec::new()\n    }\n}\n")),(0,a.kt)("h2",{id:"347-\u524d-k-\u4e2a\u9ad8\u9891\u5143\u7d20"},(0,a.kt)("a",{parentName:"h2",href:"https://leetcode-cn.com/problems/top-k-frequent-elements/"},"347. \u524d K \u4e2a\u9ad8\u9891\u5143\u7d20")),(0,a.kt)("p",null,"4 \u6708 20 \u65e5"),(0,a.kt)("h3",{id:"\u601d\u8def-19"},"\u601d\u8def"),(0,a.kt)("p",null,"hashmap"),(0,a.kt)("h3",{id:"\u4ee3\u7801-19"},"\u4ee3\u7801"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number[]}\n */\nvar topKFrequent = function (nums, k) {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    if (map.get(nums[i])) {\n      map.set(nums[i], map.get(nums[i]) + 1);\n    } else {\n      map.set(nums[i], 1);\n    }\n  }\n  const arr = [...map].sort((a, b) => b[1] - a[1]);\n  const res = [];\n  for (let i = 0; i < k; i++) {\n    res.push(arr[i][0]);\n  }\n  return res;\n};\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"use std::collections::HashMap;\n\nimpl Solution {\n    pub fn top_k_frequent(nums: Vec<i32>, k: i32) -> Vec<i32> {\n        let mut map = HashMap::new();\n        for num in nums {\n            *map.entry(num).or_insert(0) += 1;\n        }\n        let mut vec: Vec<(i32, i32)> = map.into_iter().collect();\n        vec.sort_by(|(_, x), (_, y)| y.cmp(x));\n        let mut res = vec![];\n        for index in 0..k as usize {\n            res.push(vec[index].0);\n        }\n        res\n    }\n}\n")),(0,a.kt)("h3",{id:"\u590d\u6742\u5ea6-18"},"\u590d\u6742\u5ea6"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(nlogn)"),(0,a.kt)("li",{parentName:"ul"},"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)")),(0,a.kt)("h2",{id:"447-\u56de\u65cb\u9556\u7684\u6570\u91cf"},(0,a.kt)("a",{parentName:"h2",href:"https://leetcode-cn.com/problems/number-of-boomerangs/"},"447. \u56de\u65cb\u9556\u7684\u6570\u91cf")),(0,a.kt)("p",null,"4 \u6708 21 \u65e5"),(0,a.kt)("h3",{id:"\u601d\u8def-20"},"\u601d\u8def"),(0,a.kt)("p",null,"hashmap\uff0c\u5bf9\u6bcf\u4e00\u4e2a\u70b9\uff0c\u6c42\u5269\u4e0b\u7684\u70b9\u5230\u8be5\u70b9\u7684\u8ddd\u79bb\uff0c\u7f13\u5b58\u8ddd\u79bb\uff0c\u7f13\u5b58\u8ddd\u79bb\u4f1a\u4f5c\u4e3a\u8fb9\uff0c\u6709\u4e24\u4e2a\u53ca\u4ee5\u4e0a\u76f8\u540c\u7684\uff0c\u5c31\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u4e2a\u56de\u65cb\u9556\uff0c\u6c42\u5176\u7ec4\u5408\u6570\u5c31\u662f\u4ece\u8be5\u70b9\u51fa\u53d1\u6784\u6210\u7684\u56de\u65cb\u9556\u6570"),(0,a.kt)("h3",{id:"\u4ee3\u7801-20"},"\u4ee3\u7801"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"var numberOfBoomerangs = function (points) {\n  let count = 0;\n  function calcDist(a, b) {\n    return (a[0] - b[0]) ** 2 + (a[1] - b[1]) ** 2;\n  }\n  for (let i = 0; i < points.length; i++) {\n    const map = {};\n    for (let j = 0; j < points.length; j++) {\n      if (points[i] != points[j]) {\n        let dist = calcDist(points[i], points[j]);\n        map[dist] = (map[dist] || 0) + 1;\n      }\n    }\n    for (let d in map) {\n      let num = map[d];\n      if (num > 1) {\n        count += num * (num - 1);\n      }\n    }\n  }\n  return count;\n};\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"use std::collections::HashMap;\n\nimpl Solution {\n    pub fn calaDist(x: &Vec<i32>, y: &Vec<i32>) -> i32 {\n        let distx = x[0] - y[0];\n        let disty = x[1] - y[1];\n        distx * distx + disty * disty\n    }\n    pub fn number_of_boomerangs(points: Vec<Vec<i32>>) -> i32 {\n        let mut count: i32 = 0;\n        for (i, ival) in points.iter().enumerate() {\n            let mut map = HashMap::new();\n            for (j, jval) in points.iter().enumerate() {\n                if i == j {\n                    continue;\n                }\n                let dist = Self::calaDist(ival, jval);\n                *map.entry(dist).or_insert(0) += 1;\n            }\n            for (_, num) in map.iter() {\n                if *num > 1 {\n                    count += num * (num - 1);\n                }\n            }\n        }\n        count\n    }\n}\n")),(0,a.kt)("h3",{id:"\u590d\u6742\u5ea6-19"},"\u590d\u6742\u5ea6"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)"),(0,a.kt)("li",{parentName:"ul"},"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)")),(0,a.kt)("h2",{id:"3-\u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32"},(0,a.kt)("a",{parentName:"h2",href:"https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/"},"3. \u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32")),(0,a.kt)("p",null,"4 \u6708 22 \u65e5"),(0,a.kt)("h3",{id:"\u601d\u8def-21"},"\u601d\u8def"),(0,a.kt)("p",null,"\u6ed1\u52a8\u7a97\u53e3"),(0,a.kt)("h3",{id:"\u4ee3\u7801-21"},"\u4ee3\u7801"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"var lengthOfLongestSubstring = function (s) {\n  let l = 0;\n  let res = 0;\n  const map = new Map();\n  for (let j = 0; j < s.length; j++) {\n    // map.get(s[j]) >= l \u4fdd\u8bc1\u91cd\u590d\u5143\u7d20\u5728\u533a\u95f4\u91cc\n    if (map.has(s[j]) && map.get(s[j]) >= l) {\n      // \u4ee5\u91cd\u590d\u4f4d\u7f6e+1\u4f5c\u4e3a\u5de6\u8fb9\u754c\n      l = map.get(s[j]) + 1;\n    }\n    res = Math.max(res, j - l + 1);\n    map.set(s[j], j);\n  }\n  return res;\n};\n")),(0,a.kt)("h3",{id:"\u590d\u6742\u5ea6-20"},"\u590d\u6742\u5ea6"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)"),(0,a.kt)("li",{parentName:"ul"},"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)")),(0,a.kt)("h2",{id:"30-\u4e32\u8054\u6240\u6709\u5355\u8bcd\u7684\u5b50\u4e32"},(0,a.kt)("a",{parentName:"h2",href:"https://leetcode-cn.com/problems/substring-with-concatenation-of-all-words/"},"30. \u4e32\u8054\u6240\u6709\u5355\u8bcd\u7684\u5b50\u4e32")),(0,a.kt)("p",null,"4 \u6708 23 \u65e5"),(0,a.kt)("h3",{id:"\u601d\u8def-22"},"\u601d\u8def"),(0,a.kt)("p",null,"\u8ba1\u7b97 words \u6bb5\u7684\u603b\u957f\u5ea6\uff0c\u6839\u636e words \u7ef4\u62a4 hash \u8868\uff0c\u9700\u8981\u5728\u76ee\u6807 string \u91cc\u6309\u7740 words \u603b\u957f\u5ea6\u53bb\u904d\u5386\u5b50\u4e32\uff0c\u5224\u65ad\u5b50\u4e32\u91cc\u662f\u5426\u5b58\u5728 hash \u8868\u7684\u5b57\u6bb5\uff0c\u82e5\u5b58\u5728\uff0chash \u8868\u4e2d\u5bf9\u5e94\u5b57\u6bb5\u503c\u51cf 1\uff0c\u76f4\u5230\u5bf9\u5e94\u5b57\u6bb5\u503c\u4e3a 0\uff0c\u8868\u793a\u8be5\u5b57\u6bb5\u5df2\u7ecf\u7528\u5b8c\uff1b\u82e5\u4e0d\u5b58\u5728\uff0c\u5219\u653e\u5f03\u8be5\u5b50\u4e32\uff0c\u53f3\u79fb\u904d\u5386\u4e0b\u4e00\u4e2a\u5b50\u4e32"),(0,a.kt)("h3",{id:"\u4ee3\u7801-22"},"\u4ee3\u7801"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"var findSubstring = function (s, words) {\n  const wordSize = words[0].length;\n  const substringLen = wordSize * words.length;\n\n  const wordsCount = {};\n  words.forEach((w) => (wordsCount[w] = (wordsCount[w] || 0) + 1));\n\n  const res = [];\n  for (let i = 0; i <= s.length - substringLen; i++) {\n    const tempCount = { ...wordsCount };\n    let count = words.length;\n\n    for (let j = i; j < i + substringLen; j += wordSize) {\n      const word = s.slice(j, j + wordSize);\n\n      if (!(word in tempCount) || tempCount[word] <= 0) break;\n\n      tempCount[word]--;\n      count--;\n    }\n\n    if (count === 0) res.push(i);\n  }\n  return res;\n};\n")),(0,a.kt)("h3",{id:"\u590d\u6742\u5ea6-21"},"\u590d\u6742\u5ea6"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(mn)\uff0cm \u662f\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\uff0cn \u662f\u6570\u7ec4\u7684\u957f\u5ea6"),(0,a.kt)("li",{parentName:"ul"},"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)")),(0,a.kt)("h2",{id:"1590-\u4f7f\u6570\u7ec4\u548c\u80fd\u88ab-p-\u6574\u9664"},(0,a.kt)("a",{parentName:"h2",href:"https://leetcode-cn.com/problems/make-sum-divisible-by-p/"},"1590. \u4f7f\u6570\u7ec4\u548c\u80fd\u88ab P \u6574\u9664")),(0,a.kt)("p",null,"4 \u6708 24 \u65e5"),(0,a.kt)("h3",{id:"\u601d\u8def-23"},"\u601d\u8def"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"\u524d\u7f00\u548c+hashtable")),(0,a.kt)("p",null,"\u6839\u636e\u540c\u4f59\u5b9a\u7406\uff0c\u6211\u4eec\u8981\u627e\u4e00\u4e2a\u5b50\u533a\u95f4\uff0c\u8be5\u5b50\u533a\u95f4\u6ee1\u8db3 ",(0,a.kt)("inlineCode",{parentName:"p"},"subSum%p = mod = sum%p"),"\uff0c\u8fd9\u6837\u9664\u53bb\u8be5\u5b50\u533a\u95f4\u5269\u4e0b\u7684 arrSum \u5c31\u53ef\u4ee5\u6574\u9664 p"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"subSum = preSum[j]-preSub[i]")," \u6ee1\u8db3 ",(0,a.kt)("inlineCode",{parentName:"p"},"preSum[j]%p - preSum[i]%p = mod")),(0,a.kt)("p",null,"\u7ef4\u62a4\u4e00\u4e2a hash \u8868\uff0c\u8bb0\u5f55 ",(0,a.kt)("inlineCode",{parentName:"p"},"preSum[i]%p")," \u548c ",(0,a.kt)("inlineCode",{parentName:"p"},"i"),"\uff0c\u8fd9\u6837\u6839\u636e\u4e4b\u540e\u7684 ",(0,a.kt)("inlineCode",{parentName:"p"},"preSum[j]%p - mod")," \u5c31\u53ef\u4ee5\u627e\u5230 subSum \u4e5f\u5c31\u662f j-i"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u6709\u4e00\u4e2a\u7279\u6b8a\u60c5\u51b5 ",(0,a.kt)("inlineCode",{parentName:"li"},"preSub[i]%p = 0"),"\uff0c\u8fd9\u65f6 ",(0,a.kt)("inlineCode",{parentName:"li"},"(preSum[i]%p - mod + p)%p = mod"),"\uff0c\u533a\u95f4\u957f\u5ea6 ",(0,a.kt)("inlineCode",{parentName:"li"},"i-(-1)=i+1 = 0"),"\uff0c\u653e\u4e00\u4e2a\u54e8\u5175\u8282\u70b9 (0,-1) \u65b9\u4fbf\u76f4\u63a5\u6c42\u533a\u95f4\u957f\u5ea6")),(0,a.kt)("h3",{id:"\u4ee3\u7801-23"},"\u4ee3\u7801"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"var minSubarray = function (nums, p) {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  let mod = sum % p;\n  if (mod == 0) {\n    return 0;\n  }\n  const map = new Map();\n  let preSum = 0;\n  let res = Infinity;\n  map.set(0, -1);\n  for (let i = 0; i < nums.length; i++) {\n    preSum += nums[i];\n    // \u8003\u8651\u5230\u53ef\u80fd\u5f53\u524d\u7684preSum%p\u5c0f\u4e8emod \u6240\u4ee5 +p \u4e4b\u540e\u518d\u53d6\u4f59\u6570\n    if (map.has(((preSum % p) - mod + p) % p)) {\n      res = Math.min(res, i - map.get(((preSum % p) - mod + p) % p));\n    }\n    map.set(preSum % p, i);\n  }\n  res >= nums.length && (res = Infinity);\n  return res == Infinity ? -1 : res;\n};\n")),(0,a.kt)("h3",{id:"\u590d\u6742\u5ea6-22"},"\u590d\u6742\u5ea6"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)"),(0,a.kt)("li",{parentName:"ul"},"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)")),(0,a.kt)("h2",{id:"876-\u94fe\u8868\u7684\u4e2d\u95f4\u7ed3\u70b9"},(0,a.kt)("a",{parentName:"h2",href:"https://leetcode-cn.com/problems/middle-of-the-linked-list/"},"876. \u94fe\u8868\u7684\u4e2d\u95f4\u7ed3\u70b9")),(0,a.kt)("p",null,"4 \u6708 25 \u65e5"),(0,a.kt)("h3",{id:"\u601d\u8def-24"},"\u601d\u8def"),(0,a.kt)("p",null,"\u5feb\u6162\u6307\u9488"),(0,a.kt)("h3",{id:"\u4ee3\u7801-24"},"\u4ee3\u7801"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"// \u5feb\u6162\u6307\u9488\nvar middleNode = function (head) {\n  let dummy = new ListNode(0);\n  dummy.next = head;\n  let slow = dummy,\n    fast = dummy;\n  while (fast && fast.next) {\n    fast = fast.next.next;\n    slow = slow.next;\n  }\n  // \u5bf9\u4e8e\u5076\u6570\u4e2a\uff0c\u4e2d\u95f4\u8282\u70b9\u6709\u4e24\u4e2a\uff0c\u8fd4\u56de\u9760\u540e\u7684\u8282\u70b9\n  return fast == null ? slow : slow.next;\n};\n")),(0,a.kt)("h3",{id:"\u590d\u6742\u5ea6-23"},"\u590d\u6742\u5ea6"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u94fe\u8868\u4e2d\u7684\u8282\u70b9\u6570\u76ee"),(0,a.kt)("li",{parentName:"ul"},"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\uff0c\u53ea\u9700\u8981\u5e38\u6570\u7a7a\u95f4\u5b58\u653e slow \u548c fast \u4e24\u4e2a\u6307\u9488")),(0,a.kt)("h2",{id:"26\u5220\u9664\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u9879"},(0,a.kt)("a",{parentName:"h2",href:"https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/"},"26.\u5220\u9664\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u9879")),(0,a.kt)("p",null,"4 \u6708 26 \u65e5"),(0,a.kt)("h3",{id:"\u601d\u8def-25"},"\u601d\u8def"),(0,a.kt)("p",null,"\u53cc\u6307\u9488"),(0,a.kt)("h3",{id:"\u4ee3\u7801-25"},"\u4ee3\u7801"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"var removeDuplicates = function (nums) {\n  let i = 0;\n  for (let j = 1; j < nums.length; j++) {\n    if (nums[i] !== nums[j]) {\n      i++;\n      nums[i] = nums[j];\n    }\n  }\n  return i + 1;\n};\n")),(0,a.kt)("h3",{id:"\u590d\u6742\u5ea6-24"},"\u590d\u6742\u5ea6"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)"),(0,a.kt)("li",{parentName:"ul"},"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)")),(0,a.kt)("h2",{id:"35-\u641c\u7d22\u63d2\u5165\u4f4d\u7f6e"},(0,a.kt)("a",{parentName:"h2",href:"https://leetcode-cn.com/problems/search-insert-position"},"35. \u641c\u7d22\u63d2\u5165\u4f4d\u7f6e")),(0,a.kt)("p",null,"4 \u6708 27 \u65e5"),(0,a.kt)("h3",{id:"\u601d\u8def-26"},"\u601d\u8def"),(0,a.kt)("p",null,"\u4e8c\u5206\u6cd5"),(0,a.kt)("h3",{id:"\u4ee3\u7801-26"},"\u4ee3\u7801"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"var searchInsert = function (nums, target) {\n  let left = 0;\n  let right = nums.length - 1;\n  while (left <= right) {\n    let mid = (left + right) >>> 1;\n    if (nums[mid] === target) {\n      return mid;\n    }\n    if (nums[mid] < target) {\n      left = mid + 1;\n    }\n    if (nums[mid] > target) {\n      right = mid - 1;\n    }\n  }\n  return left;\n};\n")),(0,a.kt)("h3",{id:"\u590d\u6742\u5ea6-25"},"\u590d\u6742\u5ea6"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(nlogn)"),(0,a.kt)("li",{parentName:"ul"},"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)")),(0,a.kt)("h2",{id:"239-\u6ed1\u52a8\u7a97\u53e3\u6700\u5927\u503c"},(0,a.kt)("a",{parentName:"h2",href:"https://leetcode-cn.com/problems/sliding-window-maximum/"},"239. \u6ed1\u52a8\u7a97\u53e3\u6700\u5927\u503c")),(0,a.kt)("p",null,"4 \u6708 28 \u65e5"),(0,a.kt)("h3",{id:"\u601d\u8def-27"},"\u601d\u8def"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u5355\u8c03\u9012\u51cf\u961f\u5217"),(0,a.kt)("li",{parentName:"ul"},"\u5229\u7528\u5355\u8c03\u961f\u5217\u5b58\u4e0b\u6807\uff0c \u5934\u90e8\u662f\u533a\u95f4\u6700\u5927\u503c max \u5bf9\u5e94\u7684\u4e0b\u6807"),(0,a.kt)("li",{parentName:"ul"},"\u6839\u636e\u5f53\u524d\u4e0b\u6807\u5bf9\u5e94\u503c\u7684\u5927\u5c0f\uff0c\u628a\u5f53\u524d\u4e0b\u6807\u653e\u5230\u961f\u5217\u5408\u9002\u7684\u4f4d\u7f6e"),(0,a.kt)("li",{parentName:"ul"},"\u53ea\u8981\u6784\u6210\u4e86\u6ed1\u52a8\u7a97\u53e3\uff0c\u5c31\u53ef\u4ee5\u628a\u961f\u5217\u6700\u5927\u503c\uff08\u5934\u90e8\uff09\u5bf9\u5e94\u7684\u503c \u653e\u5230\u7ed3\u679c\u6570\u7ec4\u4e2d")),(0,a.kt)("h3",{id:"\u4ee3\u7801-27"},"\u4ee3\u7801"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"var maxSlidingWindow = function (nums, k) {\n  const res = [];\n  const queue = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (i - queue[0] >= k) queue.shift();\n    while (nums[queue[queue.length - 1]] <= nums[i]) {\n      queue.pop();\n    }\n    queue.push(i);\n    if (i >= k - 1) {\n      res.push(nums[queue[0]]);\n    }\n  }\n  return res;\n};\n")),(0,a.kt)("h3",{id:"\u590d\u6742\u5ea6-26"},"\u590d\u6742\u5ea6"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0cn \u662f nums \u7684\u957f\u5ea6\uff0c\u6bcf\u4e2a\u5143\u7d20\u5165\u961f\u4e00\u6b21"),(0,a.kt)("li",{parentName:"ul"},"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(k)\uff0c\u5b9a\u4e49\u4e86\u4e00\u4e2a\u8f85\u52a9\u961f\u5217 queue\uff0c\u6700\u591a\u5b58\u653e k \u5927\u5c0f\u7684\u5143\u7d20")),(0,a.kt)("h2",{id:"997-\u627e\u5230\u5c0f\u9547\u7684\u6cd5\u5b98"},(0,a.kt)("a",{parentName:"h2",href:"https://leetcode-cn.com/problems/find-the-town-judge/"},"997. \u627e\u5230\u5c0f\u9547\u7684\u6cd5\u5b98")),(0,a.kt)("p",null,"4 \u6708 29 \u65e5"),(0,a.kt)("h3",{id:"\u601d\u8def-28"},"\u601d\u8def"),(0,a.kt)("p",null,"\u56fe\uff0cn \u4e2a\u8282\u70b9\uff0c\u6c42\u5176\u4ed6\u8282\u70b9\u90fd\u5165\u5ea6\uff0c\u4f46\u662f\u8be5\u8282\u70b9\u4e0d\u51fa\u5ea6"),(0,a.kt)("h3",{id:"\u4ee3\u7801-28"},"\u4ee3\u7801"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"var findJudge = function (n, trust) {\n  // 1 - n \u7684\u7f16\u53f7\n  const inDegrees = new Array(n + 1).fill(0);\n  const outDegrees = new Array(n + 1).fill(0);\n  for (const item of trust) {\n    // i -> \u51fa\u5ea6 j -> \u5165\u5ea6\n    const [i, j] = item;\n    inDegrees[j]++;\n    outDegrees[i]++;\n  }\n  for (let i = 1; i <= n; i++) {\n    if (inDegrees[i] == n - 1 && outDegrees[i] == 0) {\n      return i;\n    }\n  }\n  return -1;\n};\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"impl Solution {\n    pub fn find_judge(n: i32, trust: Vec<Vec<i32>>) -> i32 {\n        let n = n as usize;\n        let mut trusted = vec![0; n + 1];\n        let mut trusts = vec![0; n + 1];\n\n        for pair in trust {\n            let (a, b) = (pair[0] as usize, pair[1] as usize);\n            trusts[a] += 1;\n            trusted[b] += 1;\n        }\n\n        for i in 1..n + 1 {\n            if trusts[i] == 0 && trusted[i] == n - 1 {\n                return i as i32;\n            }\n        }\n\n        -1\n    }\n}\n")),(0,a.kt)("h3",{id:"\u590d\u6742\u5ea6-27"},"\u590d\u6742\u5ea6"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n+m)\uff0c\u5176\u4e2d mm \u662f trust \u7684\u957f\u5ea6\u3002\u9996\u5148\u9700\u8981\u904d\u5386 trust \u8ba1\u7b97\u51fa inDegrees \u548c outDegrees\uff0c\u7136\u540e\u9700\u8981\u904d\u5386 inDegrees \u548c outDegrees \u6765\u786e\u5b9a\u6cd5\u5b98"),(0,a.kt)("li",{parentName:"ul"},"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)")),(0,a.kt)("h2",{id:"886-\u53ef\u80fd\u7684\u4e8c\u5206\u6cd5"},(0,a.kt)("a",{parentName:"h2",href:"https://leetcode-cn.com/problems/possible-bipartition/"},"886. \u53ef\u80fd\u7684\u4e8c\u5206\u6cd5")),(0,a.kt)("p",null,"4 \u6708 30 \u65e5"),(0,a.kt)("h3",{id:"\u601d\u8def-29"},"\u601d\u8def"),(0,a.kt)("p",null,"\u672c\u8d28\u4e0a\u5c31\u662f\u5224\u65ad\u4e8c\u5206\u56fe\u3002\u4e8c\u5206\u56fe\u5f62\u8c61\u7406\u89e3\uff1a\u53ef\u4ee5\u7528\u4e24\u79cd\u989c\u8272\uff08\u6bd4\u5982-1\uff0c1\uff09\u4ee3\u8868\u8fd9\u4e24\u4e2a\u96c6\u5408\uff0c\u76f8\u90bb\u7684\u9876\u70b9\u4e0d\u80fd\u662f\u540c\u4e00\u79cd\u989c\u8272\u3002"),(0,a.kt)("p",null,"\u4e3e\u4f8b\uff0c\u6784\u5efa\u4e00\u4e2a\u56fe\uff0c\u8fd9\u663e\u7136\u4e0d\u662f\u4e8c\u5206\u56fe\uff08\u6700\u660e\u663e\u7684\u5c31\u662f A\u3001C\u3001D \u8fd9\u4e09\u4e2a\u9876\u70b9\u6709\u95ee\u9898\uff09\uff1a"),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://tvax2.sinaimg.cn/mw690/006T9etDly1h1ru4wp212j316u0potsm.jpg",alt:"image"})),(0,a.kt)("p",null,"\u6bd4\u5982 A \u662f 1\uff08belong\uff09\uff0cB\u3001C\u3001D \u5c31\u662f-1\uff08-1","*","belong\uff09\uff0c\u4f46\u662f\u5bf9\u4e8e\u7b2c\u4e09\u884c C\uff08-1\uff09\u6765\u8bb2\uff0c\u8981\u6c42 A\u3001D\u3001G \u90fd\u662f 1\uff0c\u5c31\u77db\u76fe\u4e86\uff0c\u65e0\u6cd5\u6784\u6210\u4e8c\u5206\u56fe\u3002"),(0,a.kt)("h3",{id:"\u4ee3\u7801-29"},"\u4ee3\u7801"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"var possibleBipartition = function (N, dislikes) {\n  let map = {};\n  let group = new Array(N + 1).fill(0);\n\n  // \u6784\u5efa\u56fe -> \u90bb\u63a5\u8868\n  for (let [a, b] of dislikes) {\n    if (map.hasOwnProperty(a)) {\n      map[a].push(b);\n    } else {\n      map[a] = [b];\n    }\n\n    if (map.hasOwnProperty(b)) {\n      map[b].push(a);\n    } else {\n      map[b] = [a];\n    }\n  }\n  // \u904d\u5386\u6bcf\u4e2a person\n  for (let i = 1; i <= N; i++) {\n    if (group[i] === 0 && !helper(i, map, group, 1)) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n// \u67d3\u8272\uff0c\u4e0d\u7b26\u5408\u4e8c\u5206\u56fe\u7684\u81ea\u7136\u662f false\nlet helper = (person, map, group, belong) => {\n  if (group[person] !== 0) {\n    if (group[person] !== belong) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  if (!map[person]) {\n    group[person] = belong;\n    return true;\n  }\n\n  group[person] = belong;\n\n  for (let val of map[person]) {\n    if (!helper(val, map, group, -1 * belong)) {\n      return false;\n    }\n  }\n\n  return true;\n};\n")),(0,a.kt)("h3",{id:"\u590d\u6742\u5ea6-28"},"\u590d\u6742\u5ea6"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n+d)\uff0cd \u8868\u793a dislikes \u7684\u957f\u5ea6"),(0,a.kt)("li",{parentName:"ul"},"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n+d)")),(0,a.kt)("h2",{id:"657-\u673a\u5668\u4eba\u80fd\u5426\u8fd4\u56de\u539f\u70b9"},(0,a.kt)("a",{parentName:"h2",href:"https://leetcode-cn.com/problems/robot-return-to-origin/"},"657. \u673a\u5668\u4eba\u80fd\u5426\u8fd4\u56de\u539f\u70b9")),(0,a.kt)("p",null,"5 \u6708 2 \u65e5"),(0,a.kt)("h3",{id:"\u601d\u8def-30"},"\u601d\u8def"),(0,a.kt)("p",null,"\u53ea\u9700\u8981\u5224\u65ad LR \u7684\u4e2a\u6570\u662f\u5426\u76f8\u7b49\uff0cUD \u7684\u4e2a\u6570\u662f\u5426\u76f8\u7b49\u5373\u53ef\u3002"),(0,a.kt)("h3",{id:"\u4ee3\u7801-30"},"\u4ee3\u7801"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'var judgeCircle = function (moves) {\n  const obj = {\n    R: 0,\n    L: 0,\n    U: 0,\n    D: 0,\n  };\n  for (const move of moves) {\n    obj[move]++;\n  }\n  return obj["R"] === obj["L"] && obj["U"] === obj["D"];\n};\n')),(0,a.kt)("h3",{id:"\u590d\u6742\u5ea6-29"},"\u590d\u6742\u5ea6"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)"),(0,a.kt)("li",{parentName:"ul"},"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)")),(0,a.kt)("h2",{id:"1834-\u5355\u7ebf\u7a0b-cpu"},(0,a.kt)("a",{parentName:"h2",href:"https://leetcode-cn.com/problems/single-threaded-cpu/"},"1834. \u5355\u7ebf\u7a0b CPU")),(0,a.kt)("p",null,"5 \u6708 3 \u65e5"),(0,a.kt)("h3",{id:"\u601d\u8def-31"},"\u601d\u8def"),(0,a.kt)("p",null,"\u770b\u9898\u89e3\u5b66\u5230\u7684"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"\u9996\u5148\u8981\u8bb0\u5f55\u4efb\u52a1\u6807\u53f7"),(0,a.kt)("li",{parentName:"ol"},"\u6211\u4eec\u8981\u505a\u7684\u5c31\u662f\u6bcf\u6b21\u5c06\u53ef\u4ee5\u5230\u8fbe\u5165\u961f\u65f6\u95f4\u7684\u4efb\u52a1\u5165\u961f\uff08\u5165\u961f\u65f6\u95f4\u4e0d\u5927\u4e8e\u4e0a\u4e00\u4e2a\u4efb\u52a1\u7684\u7ed3\u675f\u65f6\u95f4\uff09"),(0,a.kt)("li",{parentName:"ol"},"\u5224\u65ad\u5f53\u524d\u961f\u5217\u662f\u5426\u6709\u53ef\u6267\u884c\u7684\u4efb\u52a1",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"\u5982\u679c\u6709\uff0c\u53d6\u51fa\u4efb\u52a1\uff0c\u5e76\u4e14\u8bbe\u7f6e\u4efb\u52a1\u7ed3\u675f\u65f6\u95f4\uff0c\u8bb0\u5f55\u4efb\u52a1\u6807\u53f7"),(0,a.kt)("li",{parentName:"ul"},"\u5982\u679c\u6ca1\u6709\uff0c\u8bf4\u660e\u6b65\u9aa4 2 \u6ca1\u6709\u53ef\u4ee5\u5230\u8fbe\u5165\u961f\u65f6\u95f4\u7684\u4efb\u52a1\uff08\u4e0b\u4e00\u4e2a\u4efb\u52a1\u7684\u5f00\u59cb\u65f6\u95f4\u6bd4\u8f83\u665a\uff09\uff0c\u6240\u4ee5\u9700\u8981\u63d0\u524d\u52a0\u4e00\u4e2a\u5224\u65ad\u903b\u8f91\uff0c\u5224\u65ad\u4e0b\u4e00\u4e2a\u4efb\u52a1\u7684\u5f00\u59cb\u65f6\u95f4\uff0c\u8bbe\u7f6e\u4e3a time")))),(0,a.kt)("h3",{id:"\u4ee3\u7801-31"},"\u4ee3\u7801"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const getOrder = function (tasks) {\n  const answer = [];\n  // \u5b98\u65b9\u81ea\u5e26\u7684\u4f18\u5148\u961f\u5217\n  const queue = new MinPriorityQueue();\n  tasks = tasks.map((task, index) => ({\n    index,\n    start: task[0],\n    time: task[1],\n  }));\n  // \u6839\u636e\u4efb\u52a1\u5165\u961f\u65f6\u95f4\u6392\u5e8f\n  tasks.sort((a, b) => b.start - a.start);\n  let time = 0;\n  while (tasks.length > 0 || !queue.isEmpty()) {\n    // \u961f\u5217\u4e3a\u7a7a\uff0c\u4e14\u6ca1\u6709\u5230\u8fbe\u4e0b\u4e00\u4e2a\u5165\u961f\u4efb\u52a1\u7684\u5165\u961f\u65f6\u95f4\n    // \u76f4\u63a5\u5c06time\u8bbe\u7f6e\u4e3a\u4e0b\u4e00\u4e2a\u5165\u961f\u4efb\u52a1\u7684\u5165\u961f\u65f6\u95f4\n    if (queue.isEmpty() && tasks[tasks.length - 1].start > time) {\n      time = tasks[tasks.length - 1].start;\n    }\n\n    while (tasks.length > 0) {\n      // \u5c06\u53ef\u4ee5\u5230\u8fbe\u5165\u961f\u65f6\u95f4\u7684\u4efb\u52a1\u52a0\u5165\u961f\u5217\n      if (tasks[tasks.length - 1].start <= time) {\n        const task = tasks.pop();\n        // \u4f20\u5165\u7684\u7b2c\u4e8c\u4e2a\u503c\u8868\u793a\u7684\u662f\u6307\u5b9a\u5f53\u524d\u5143\u7d20\u7684\u4f18\u5148\u7ea7\n        queue.enqueue(task, task.time * 100000 + task.index);\n      } else {\n        break;\n      }\n    }\n\n    // \u6267\u884c\u4efb\u52a1\n    const { element: task } = queue.dequeue();\n    // \u5c06time\u8bbe\u7f6e\u4e3a\u8be5\u4efb\u52a1\u7684\u7ed3\u675f\u65f6\u95f4\n    time += task.time;\n    answer.push(task.index);\n  }\n  return answer;\n};\n")),(0,a.kt)("h3",{id:"\u590d\u6742\u5ea6-30"},"\u590d\u6742\u5ea6"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(nlogn)\uff0c\u4f18\u5148\u961f\u5217\u5355\u6b21\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(logn)\uff0c\u64cd\u4f5c\u7684\u6b21\u6570\u4e3a n"),(0,a.kt)("li",{parentName:"ul"},"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)")))}d.isMDXComponent=!0}}]);