"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4061],{3905:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return m}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=r.createContext({}),u=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},s=function(e){var n=u(e.components);return r.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,l=e.originalType,c=e.parentName,s=a(e,["components","mdxType","originalType","parentName"]),p=u(t),m=i,f=p["".concat(c,".").concat(m)]||p[m]||d[m]||l;return t?r.createElement(f,o(o({ref:n},s),{},{components:t})):r.createElement(f,o({ref:n},s))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var l=t.length,o=new Array(l);o[0]=p;var a={};for(var c in n)hasOwnProperty.call(n,c)&&(a[c]=n[c]);a.originalType=e,a.mdxType="string"==typeof e?e:i,o[1]=a;for(var u=2;u<l;u++)o[u]=t[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},6126:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return a},contentTitle:function(){return c},metadata:function(){return u},toc:function(){return s},default:function(){return p}});var r=t(7462),i=t(3366),l=(t(7294),t(3905)),o=["components"],a={sidebar_position:1},c=void 0,u={unversionedId:"leetcode/leetcode\u65e5\u8bb0",id:"leetcode/leetcode\u65e5\u8bb0",isDocsHomePage:!1,title:"leetcode\u65e5\u8bb0",description:"989. \u6570\u7ec4\u5f62\u5f0f\u7684\u6574\u6570\u52a0\u6cd5",source:"@site/docs/leetcode/leetcode\u65e5\u8bb0.md",sourceDirName:"leetcode",slug:"/leetcode/leetcode\u65e5\u8bb0",permalink:"/docs/leetcode/leetcode\u65e5\u8bb0",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/leetcode/leetcode\u65e5\u8bb0.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"\u4e00\u4e9b\u9762\u8bd5",permalink:"/docs/\u4e0d\u53ea\u662f\u524d\u7aef/\u4e00\u4e9b\u9762\u8bd5"}},s=[{value:"989. \u6570\u7ec4\u5f62\u5f0f\u7684\u6574\u6570\u52a0\u6cd5",id:"989-\u6570\u7ec4\u5f62\u5f0f\u7684\u6574\u6570\u52a0\u6cd5",children:[{value:"\u601d\u8def",id:"\u601d\u8def",children:[]},{value:"\u4ee3\u7801",id:"\u4ee3\u7801",children:[]},{value:"\u590d\u6742\u5ea6",id:"\u590d\u6742\u5ea6",children:[]},{value:"rust \u7248\u672c",id:"rust-\u7248\u672c",children:[]}]},{value:"821. \u5b57\u7b26\u7684\u6700\u77ed\u8ddd\u79bb",id:"821-\u5b57\u7b26\u7684\u6700\u77ed\u8ddd\u79bb",children:[{value:"\u601d\u8def",id:"\u601d\u8def-1",children:[]},{value:"\u4ee3\u7801",id:"\u4ee3\u7801-1",children:[]},{value:"\u590d\u6742\u5ea6\u5206\u6790",id:"\u590d\u6742\u5ea6\u5206\u6790",children:[]},{value:"rust \u7248\u672c",id:"rust-\u7248\u672c-1",children:[]}]}],d={toc:s};function p(e){var n=e.components,t=(0,i.Z)(e,o);return(0,l.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"989-\u6570\u7ec4\u5f62\u5f0f\u7684\u6574\u6570\u52a0\u6cd5"},(0,l.kt)("a",{parentName:"h2",href:"https://leetcode-cn.com/problems/add-to-array-form-of-integer/"},"989. \u6570\u7ec4\u5f62\u5f0f\u7684\u6574\u6570\u52a0\u6cd5")),(0,l.kt)("p",null,"4 \u6708 1 \u65e5"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"\u5bf9\u4e8e\u975e\u8d1f\u6574\u6570 X \u800c\u8a00\uff0cX \u7684\u6570\u7ec4\u5f62\u5f0f\u662f\u6bcf\u4f4d\u6570\u5b57\u6309\u4ece\u5de6\u5230\u53f3\u7684\u987a\u5e8f\u5f62\u6210\u7684\u6570\u7ec4\u3002\u4f8b\u5982\uff0c\u5982\u679c X = 1231\uff0c\u90a3\u4e48\u5176\u6570\u7ec4\u5f62\u5f0f\u4e3a [1,2,3,1]\u3002\n\n\u7ed9\u5b9a\u975e\u8d1f\u6574\u6570 X \u7684\u6570\u7ec4\u5f62\u5f0f A\uff0c\u8fd4\u56de\u6574\u6570 X+K \u7684\u6570\u7ec4\u5f62\u5f0f\u3002\n\n\u793a\u4f8b 1\uff1a\n\u8f93\u5165\uff1aA = [1,2,0,0], K = 34\n\u8f93\u51fa\uff1a[1,2,3,4]\n\u89e3\u91ca\uff1a1200 + 34 = 1234\n\n\u793a\u4f8b 2\uff1a\n\u8f93\u5165\uff1aA = [2,7,4], K = 181\n\u8f93\u51fa\uff1a[4,5,5]\n\u89e3\u91ca\uff1a274 + 181 = 455\n\n\u793a\u4f8b 3\uff1a\n\u8f93\u5165\uff1aA = [2,1,5], K = 806\n\u8f93\u51fa\uff1a[1,0,2,1]\n\u89e3\u91ca\uff1a215 + 806 = 1021\n\n\u793a\u4f8b 4\uff1a\n\u8f93\u5165\uff1aA = [9,9,9,9,9,9,9,9,9,9], K = 1\n\u8f93\u51fa\uff1a[1,0,0,0,0,0,0,0,0,0,0]\n\u89e3\u91ca\uff1a9999999999 + 1 = 10000000000\n\n\n\u63d0\u793a\uff1a\n\n1 <= A.length <= 10000\n0 <= A[i] <= 9\n0 <= K <= 10000\n\u5982\u679c A.length > 1\uff0c\u90a3\u4e48 A[0] != 0\n")),(0,l.kt)("h3",{id:"\u601d\u8def"},"\u601d\u8def"),(0,l.kt)("p",null,"\u6309\u4f4d\u6c42\u548c\uff0c\u7528 flag \u4fdd\u5b58\u8fdb\u4f4d\uff0c\u52a0\u5230\u4e0b\u4e00\u8f6e"),(0,l.kt)("h3",{id:"\u4ee3\u7801"},"\u4ee3\u7801"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"var addToArrayForm = function (num, k) {\n  const res = [];\n  let order = num.length - 1;\n  // \u8fdb\u4f4d\n  let flag = 0;\n  while (order >= 0 || k != 0) {\n    let x = order >= 0 ? num[order] : 0;\n    let y = k != 0 ? k % 10 : 0;\n    let sum = x + y + flag;\n    // \u4fdd\u5b58\u4f59\u6570\n    res.push(sum % 10);\n    flag = Math.floor(sum / 10);\n    k = Math.floor(k / 10);\n    order--;\n  }\n  if (flag) res.push(flag);\n  return res.reverse();\n};\n")),(0,l.kt)("h3",{id:"\u590d\u6742\u5ea6"},"\u590d\u6742\u5ea6"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)"),(0,l.kt)("li",{parentName:"ul"},"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)")),(0,l.kt)("h3",{id:"rust-\u7248\u672c"},"rust \u7248\u672c"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},"impl Solution {\n    pub fn add_to_array_form(num: Vec<i32>, k: i32) -> Vec<i32> {\n        let mut res: Vec<i32> = vec![];\n        let len = num.len() - 1;\n        let mut i: i32 = len as i32;\n        let mut K = k;\n        while i >= 0 || K > 0 {\n            if (i >= 0) {\n                K = K + num[i as usize]\n            }\n            res.push(K % 10);\n            K = K / 10;\n            i = i - 1;\n        }\n        res.reverse();\n        res\n    }\n}\n")),(0,l.kt)("h2",{id:"821-\u5b57\u7b26\u7684\u6700\u77ed\u8ddd\u79bb"},(0,l.kt)("a",{parentName:"h2",href:"https://leetcode-cn.com/problems/shortest-distance-to-a-character/"},"821. \u5b57\u7b26\u7684\u6700\u77ed\u8ddd\u79bb")),(0,l.kt)("p",null,"4 \u6708 2 \u65e5"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 S \u548c\u4e00\u4e2a\u5b57\u7b26 C\u3002\u8fd4\u56de\u4e00\u4e2a\u4ee3\u8868\u5b57\u7b26\u4e32 S \u4e2d\u6bcf\u4e2a\u5b57\u7b26\u5230\u5b57\u7b26\u4e32 S \u4e2d\u7684\u5b57\u7b26 C \u7684\u6700\u77ed\u8ddd\u79bb\u7684\u6570\u7ec4\u3002\n\n\u793a\u4f8b 1:\n\n\u8f93\u5165: S = \"loveleetcode\", C = 'e'\n\u8f93\u51fa: [3, 2, 1, 0, 1, 0, 0, 1, 2, 2, 1, 0]\n\u8bf4\u660e:\n\n- \u5b57\u7b26\u4e32 S \u7684\u957f\u5ea6\u8303\u56f4\u4e3a [1, 10000]\u3002\n- C \u662f\u4e00\u4e2a\u5355\u5b57\u7b26\uff0c\u4e14\u4fdd\u8bc1\u662f\u5b57\u7b26\u4e32 S \u91cc\u7684\u5b57\u7b26\u3002\n- S \u548c C \u4e2d\u7684\u6240\u6709\u5b57\u6bcd\u5747\u4e3a\u5c0f\u5199\u5b57\u6bcd\u3002\n")),(0,l.kt)("h3",{id:"\u601d\u8def-1"},"\u601d\u8def"),(0,l.kt)("p",null,"\u4e2d\u5fc3\u6269\u5c55\uff08\u53cc\u6307\u9488\uff09\uff0c\u4ece\u5f53\u524d\u5b57\u7b26\u5411\u4e24\u8fb9\u627e\u76ee\u6807\u5b57\u7b26\uff0c\u8ba1\u7b97\u8ddd\u79bb\uff0c\u9009\u53d6\u6700\u5c0f\u503c\u3002"),(0,l.kt)("h3",{id:"\u4ee3\u7801-1"},"\u4ee3\u7801"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"var shortestToChar = function (s, c) {\n  const res = new Array(s.length).fill(0);\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == c) {\n      continue;\n    }\n    let l = i,\n      r = i,\n      shortest = Infinity;\n    while (l >= 0) {\n      if (s[l] == c) {\n        shortest = Math.min(i - l, shortest);\n        break;\n      }\n      l--;\n    }\n    while (r < s.length) {\n      if (s[r] == c) {\n        shortest = Math.min(r - i, shortest);\n        break;\n      }\n      r++;\n    }\n    res[i] = shortest;\n  }\n  return res;\n};\n")),(0,l.kt)("h3",{id:"\u590d\u6742\u5ea6\u5206\u6790"},"\u590d\u6742\u5ea6\u5206\u6790"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\uff0cn \u4e3a s \u7684\u957f\u5ea6\uff0c\u4e24\u5c42\u5faa\u73af"),(0,l.kt)("li",{parentName:"ul"},"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)")),(0,l.kt)("h3",{id:"rust-\u7248\u672c-1"},"rust \u7248\u672c"),(0,l.kt)("p",null,"\u6536\u96c6\u5b57\u7b26 c \u7684\u4f4d\u7f6e\uff0c\u5bf9\u5f53\u524d\u5143\u7d20\u6c42\u5176\u5230\u6bcf\u4e00\u4e2a\u5b57\u7b26 c \u7684\u8ddd\u79bb\uff0c\u53d6\u6700\u5c0f\u503c"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"impl Solution {\n    pub fn shortest_to_char(s: String, c: char) -> Vec<i32> {\n        // n \u7528\u6765\u6536\u96c6 \u5b57\u7b26c\u51fa\u73b0\u7684\u4f4d\u7f6e\n        let mut n: Vec<i32> = Vec::new();\n        let mut a: Vec<i32> = Vec::new();\n        // \u9898\u76ee\u4e2d\u6700\u5927\u662f10^4 \u6b21\u65b9\n        let mut min = 10000;\n        for (i, v) in s.chars().enumerate() {\n            if v == c {\n                n.push(i as i32);\n            }\n        }\n        // \u904d\u5386\u5b57\u7b26\u4e32\uff0c\u5bf9\u5f53\u524d\u5143\u7d20\uff0c\u904d\u5386\u76ee\u6807\u5b57\u7b26\u7ec4\u96c6\uff0c\u5f97\u5230\u5f53\u524d\u5143\u7d20\u548c\u6bcf\u4e00\u4e2a\u76ee\u6807\u5b57\u7b26\u7684\u8ddd\u79bb\uff0c\u8bb0\u5f55\u6700\u5c0f\u503c\n        for i in 0..s.len() {\n            min = 10000;\n            for (_, v) in n.iter().enumerate() {\n                let m = i32::abs(v - i as i32);\n                if min > m {\n                    min = m;\n                }\n            }\n            a.push(min);\n        }\n        a\n    }\n}\n")))}p.isMDXComponent=!0}}]);