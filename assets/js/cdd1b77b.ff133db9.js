"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4061],{3905:function(n,e,t){t.d(e,{Zo:function(){return p},kt:function(){return d}});var l=t(7294);function r(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function a(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(n);e&&(l=l.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,l)}return t}function u(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?a(Object(t),!0).forEach((function(e){r(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function i(n,e){if(null==n)return{};var t,l,r=function(n,e){if(null==n)return{};var t,l,r={},a=Object.keys(n);for(l=0;l<a.length;l++)t=a[l],e.indexOf(t)>=0||(r[t]=n[t]);return r}(n,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);for(l=0;l<a.length;l++)t=a[l],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(r[t]=n[t])}return r}var s=l.createContext({}),o=function(n){var e=l.useContext(s),t=e;return n&&(t="function"==typeof n?n(e):u(u({},e),n)),t},p=function(n){var e=o(n.components);return l.createElement(s.Provider,{value:e},n.children)},c={inlineCode:"code",wrapper:function(n){var e=n.children;return l.createElement(l.Fragment,{},e)}},m=l.forwardRef((function(n,e){var t=n.components,r=n.mdxType,a=n.originalType,s=n.parentName,p=i(n,["components","mdxType","originalType","parentName"]),m=o(t),d=r,h=m["".concat(s,".").concat(d)]||m[d]||c[d]||a;return t?l.createElement(h,u(u({ref:e},p),{},{components:t})):l.createElement(h,u({ref:e},p))}));function d(n,e){var t=arguments,r=e&&e.mdxType;if("string"==typeof n||r){var a=t.length,u=new Array(a);u[0]=m;var i={};for(var s in e)hasOwnProperty.call(e,s)&&(i[s]=e[s]);i.originalType=n,i.mdxType="string"==typeof n?n:r,u[1]=i;for(var o=2;o<a;o++)u[o]=t[o];return l.createElement.apply(null,u)}return l.createElement.apply(null,t)}m.displayName="MDXCreateElement"},6126:function(n,e,t){t.r(e),t.d(e,{frontMatter:function(){return i},contentTitle:function(){return s},metadata:function(){return o},toc:function(){return p},default:function(){return m}});var l=t(7462),r=t(3366),a=(t(7294),t(3905)),u=["components"],i={sidebar_position:1},s=void 0,o={unversionedId:"leetcode/leetcode\u65e5\u8bb0",id:"leetcode/leetcode\u65e5\u8bb0",isDocsHomePage:!1,title:"leetcode\u65e5\u8bb0",description:"989. \u6570\u7ec4\u5f62\u5f0f\u7684\u6574\u6570\u52a0\u6cd5",source:"@site/docs/leetcode/leetcode\u65e5\u8bb0.md",sourceDirName:"leetcode",slug:"/leetcode/leetcode\u65e5\u8bb0",permalink:"/docs/leetcode/leetcode\u65e5\u8bb0",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/leetcode/leetcode\u65e5\u8bb0.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"\u4e00\u4e9b\u9762\u8bd5",permalink:"/docs/\u4e0d\u53ea\u662f\u524d\u7aef/\u4e00\u4e9b\u9762\u8bd5"}},p=[{value:"989. \u6570\u7ec4\u5f62\u5f0f\u7684\u6574\u6570\u52a0\u6cd5",id:"989-\u6570\u7ec4\u5f62\u5f0f\u7684\u6574\u6570\u52a0\u6cd5",children:[{value:"\u601d\u8def",id:"\u601d\u8def",children:[]},{value:"\u4ee3\u7801",id:"\u4ee3\u7801",children:[]},{value:"\u590d\u6742\u5ea6",id:"\u590d\u6742\u5ea6",children:[]},{value:"rust \u7248\u672c",id:"rust-\u7248\u672c",children:[]}]},{value:"821. \u5b57\u7b26\u7684\u6700\u77ed\u8ddd\u79bb",id:"821-\u5b57\u7b26\u7684\u6700\u77ed\u8ddd\u79bb",children:[{value:"\u601d\u8def",id:"\u601d\u8def-1",children:[]},{value:"\u4ee3\u7801",id:"\u4ee3\u7801-1",children:[]},{value:"\u590d\u6742\u5ea6\u5206\u6790",id:"\u590d\u6742\u5ea6\u5206\u6790",children:[]},{value:"rust \u7248\u672c",id:"rust-\u7248\u672c-1",children:[]}]},{value:"1381. \u8bbe\u8ba1\u4e00\u4e2a\u652f\u6301\u589e\u91cf\u64cd\u4f5c\u7684\u6808",id:"1381-\u8bbe\u8ba1\u4e00\u4e2a\u652f\u6301\u589e\u91cf\u64cd\u4f5c\u7684\u6808",children:[{value:"\u601d\u8def",id:"\u601d\u8def-2",children:[]},{value:"\u4ee3\u7801",id:"\u4ee3\u7801-2",children:[]},{value:"\u590d\u6742\u5ea6",id:"\u590d\u6742\u5ea6-1",children:[]},{value:"rust \u7248\u672c",id:"rust-\u7248\u672c-2",children:[]}]},{value:"394.\u5b57\u7b26\u4e32\u7f16\u7801",id:"394\u5b57\u7b26\u4e32\u7f16\u7801",children:[{value:"\u601d\u8def",id:"\u601d\u8def-3",children:[]},{value:"\u4ee3\u7801",id:"\u4ee3\u7801-3",children:[]},{value:"\u590d\u6742\u5ea6",id:"\u590d\u6742\u5ea6-2",children:[]},{value:"rust \u7248\u672c",id:"rust-\u7248\u672c-3",children:[]}]},{value:"232. \u7528\u6808\u5b9e\u73b0\u961f\u5217",id:"232-\u7528\u6808\u5b9e\u73b0\u961f\u5217",children:[{value:"\u601d\u8def",id:"\u601d\u8def-4",children:[]},{value:"\u4ee3\u7801",id:"\u4ee3\u7801-4",children:[]},{value:"\u590d\u6742\u5ea6",id:"\u590d\u6742\u5ea6-3",children:[]},{value:"rust \u7248\u672c",id:"rust-\u7248\u672c-4",children:[]}]},{value:"768. \u6700\u591a\u80fd\u5b8c\u6210\u6392\u5e8f\u7684\u5757 II",id:"768-\u6700\u591a\u80fd\u5b8c\u6210\u6392\u5e8f\u7684\u5757-ii",children:[{value:"\u601d\u8def",id:"\u601d\u8def-5",children:[]},{value:"\u4ee3\u7801",id:"\u4ee3\u7801-5",children:[]},{value:"\u590d\u6742\u5ea6",id:"\u590d\u6742\u5ea6-4",children:[]},{value:"rust \u7248\u672c",id:"rust-\u7248\u672c-5",children:[]}]},{value:"61. \u65cb\u8f6c\u94fe\u8868",id:"61-\u65cb\u8f6c\u94fe\u8868",children:[{value:"\u601d\u8def",id:"\u601d\u8def-6",children:[]},{value:"\u4ee3\u7801",id:"\u4ee3\u7801-6",children:[]},{value:"\u590d\u6742\u5ea6",id:"\u590d\u6742\u5ea6-5",children:[]},{value:"rust \u7248\u672c",id:"rust-\u7248\u672c-6",children:[]}]},{value:"24. \u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9",id:"24-\u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9",children:[{value:"\u601d\u8def",id:"\u601d\u8def-7",children:[]},{value:"\u4ee3\u7801",id:"\u4ee3\u7801-7",children:[]},{value:"\u590d\u6742\u5ea6",id:"\u590d\u6742\u5ea6-6",children:[]},{value:"rust \u7248\u672c",id:"rust-\u7248\u672c-7",children:[]}]},{value:"109. \u6709\u5e8f\u94fe\u8868\u8f6c\u6362\u4e8c\u53c9\u641c\u7d22\u6811",id:"109-\u6709\u5e8f\u94fe\u8868\u8f6c\u6362\u4e8c\u53c9\u641c\u7d22\u6811",children:[{value:"\u601d\u8def",id:"\u601d\u8def-8",children:[]},{value:"\u4ee3\u7801",id:"\u4ee3\u7801-8",children:[]},{value:"\u590d\u6742\u5ea6",id:"\u590d\u6742\u5ea6-7",children:[]},{value:"rust \u7248\u672c",id:"rust-\u7248\u672c-8",children:[]}]},{value:"160. \u76f8\u4ea4\u94fe\u8868",id:"160-\u76f8\u4ea4\u94fe\u8868",children:[{value:"\u601d\u8def",id:"\u601d\u8def-9",children:[]},{value:"\u4ee3\u7801",id:"\u4ee3\u7801-9",children:[]},{value:"\u590d\u6742\u5ea6",id:"\u590d\u6742\u5ea6-8",children:[]}]},{value:"142. \u73af\u5f62\u94fe\u8868 II",id:"142-\u73af\u5f62\u94fe\u8868-ii",children:[{value:"\u601d\u8def",id:"\u601d\u8def-10",children:[]},{value:"\u4ee3\u7801",id:"\u4ee3\u7801-10",children:[]},{value:"\u590d\u6742\u5ea6",id:"\u590d\u6742\u5ea6-9",children:[]}]},{value:"146. LRU \u7f13\u5b58",id:"146-lru-\u7f13\u5b58",children:[{value:"\u601d\u8def",id:"\u601d\u8def-11",children:[]},{value:"\u4ee3\u7801",id:"\u4ee3\u7801-11",children:[]},{value:"\u590d\u6742\u5ea6",id:"\u590d\u6742\u5ea6-10",children:[]}]},{value:"104. \u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6",id:"104-\u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6",children:[{value:"\u601d\u8def",id:"\u601d\u8def-12",children:[]},{value:"\u4ee3\u7801",id:"\u4ee3\u7801-12",children:[]},{value:"\u590d\u6742\u5ea6",id:"\u590d\u6742\u5ea6-11",children:[]},{value:"rust \u7248\u672c",id:"rust-\u7248\u672c-9",children:[]}]},{value:"100. \u76f8\u540c\u7684\u6811",id:"100-\u76f8\u540c\u7684\u6811",children:[{value:"\u601d\u8def",id:"\u601d\u8def-13",children:[]},{value:"\u4ee3\u7801",id:"\u4ee3\u7801-13",children:[]},{value:"\u590d\u6742\u5ea6",id:"\u590d\u6742\u5ea6-12",children:[]},{value:"rust \u7248\u672c",id:"rust-\u7248\u672c-10",children:[]}]}],c={toc:p};function m(n){var e=n.components,t=(0,r.Z)(n,u);return(0,a.kt)("wrapper",(0,l.Z)({},c,t,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"989-\u6570\u7ec4\u5f62\u5f0f\u7684\u6574\u6570\u52a0\u6cd5"},(0,a.kt)("a",{parentName:"h2",href:"https://leetcode-cn.com/problems/add-to-array-form-of-integer/"},"989. \u6570\u7ec4\u5f62\u5f0f\u7684\u6574\u6570\u52a0\u6cd5")),(0,a.kt)("p",null,"4 \u6708 1 \u65e5"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"\u5bf9\u4e8e\u975e\u8d1f\u6574\u6570 X \u800c\u8a00\uff0cX \u7684\u6570\u7ec4\u5f62\u5f0f\u662f\u6bcf\u4f4d\u6570\u5b57\u6309\u4ece\u5de6\u5230\u53f3\u7684\u987a\u5e8f\u5f62\u6210\u7684\u6570\u7ec4\u3002\u4f8b\u5982\uff0c\u5982\u679c X = 1231\uff0c\u90a3\u4e48\u5176\u6570\u7ec4\u5f62\u5f0f\u4e3a [1,2,3,1]\u3002\n\n\u7ed9\u5b9a\u975e\u8d1f\u6574\u6570 X \u7684\u6570\u7ec4\u5f62\u5f0f A\uff0c\u8fd4\u56de\u6574\u6570 X+K \u7684\u6570\u7ec4\u5f62\u5f0f\u3002\n\n\u793a\u4f8b 1\uff1a\n\u8f93\u5165\uff1aA = [1,2,0,0], K = 34\n\u8f93\u51fa\uff1a[1,2,3,4]\n\u89e3\u91ca\uff1a1200 + 34 = 1234\n\n\u793a\u4f8b 2\uff1a\n\u8f93\u5165\uff1aA = [2,7,4], K = 181\n\u8f93\u51fa\uff1a[4,5,5]\n\u89e3\u91ca\uff1a274 + 181 = 455\n\n\u793a\u4f8b 3\uff1a\n\u8f93\u5165\uff1aA = [2,1,5], K = 806\n\u8f93\u51fa\uff1a[1,0,2,1]\n\u89e3\u91ca\uff1a215 + 806 = 1021\n\n\u793a\u4f8b 4\uff1a\n\u8f93\u5165\uff1aA = [9,9,9,9,9,9,9,9,9,9], K = 1\n\u8f93\u51fa\uff1a[1,0,0,0,0,0,0,0,0,0,0]\n\u89e3\u91ca\uff1a9999999999 + 1 = 10000000000\n\n\n\u63d0\u793a\uff1a\n\n1 <= A.length <= 10000\n0 <= A[i] <= 9\n0 <= K <= 10000\n\u5982\u679c A.length > 1\uff0c\u90a3\u4e48 A[0] != 0\n")),(0,a.kt)("h3",{id:"\u601d\u8def"},"\u601d\u8def"),(0,a.kt)("p",null,"\u6309\u4f4d\u6c42\u548c\uff0c\u7528 flag \u4fdd\u5b58\u8fdb\u4f4d\uff0c\u52a0\u5230\u4e0b\u4e00\u8f6e"),(0,a.kt)("h3",{id:"\u4ee3\u7801"},"\u4ee3\u7801"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"var addToArrayForm = function (num, k) {\n  const res = [];\n  let order = num.length - 1;\n  // \u8fdb\u4f4d\n  let flag = 0;\n  while (order >= 0 || k != 0) {\n    let x = order >= 0 ? num[order] : 0;\n    let y = k != 0 ? k % 10 : 0;\n    let sum = x + y + flag;\n    // \u4fdd\u5b58\u4f59\u6570\n    res.push(sum % 10);\n    flag = Math.floor(sum / 10);\n    k = Math.floor(k / 10);\n    order--;\n  }\n  if (flag) res.push(flag);\n  return res.reverse();\n};\n")),(0,a.kt)("h3",{id:"\u590d\u6742\u5ea6"},"\u590d\u6742\u5ea6"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)"),(0,a.kt)("li",{parentName:"ul"},"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)")),(0,a.kt)("h3",{id:"rust-\u7248\u672c"},"rust \u7248\u672c"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"impl Solution {\n    pub fn add_to_array_form(num: Vec<i32>, k: i32) -> Vec<i32> {\n        let mut res: Vec<i32> = vec![];\n        let len = num.len() - 1;\n        let mut i: i32 = len as i32;\n        let mut K = k;\n        while i >= 0 || K > 0 {\n            if (i >= 0) {\n                K = K + num[i as usize]\n            }\n            res.push(K % 10);\n            K = K / 10;\n            i = i - 1;\n        }\n        res.reverse();\n        res\n    }\n}\n")),(0,a.kt)("h2",{id:"821-\u5b57\u7b26\u7684\u6700\u77ed\u8ddd\u79bb"},(0,a.kt)("a",{parentName:"h2",href:"https://leetcode-cn.com/problems/shortest-distance-to-a-character/"},"821. \u5b57\u7b26\u7684\u6700\u77ed\u8ddd\u79bb")),(0,a.kt)("p",null,"4 \u6708 2 \u65e5"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 S \u548c\u4e00\u4e2a\u5b57\u7b26 C\u3002\u8fd4\u56de\u4e00\u4e2a\u4ee3\u8868\u5b57\u7b26\u4e32 S \u4e2d\u6bcf\u4e2a\u5b57\u7b26\u5230\u5b57\u7b26\u4e32 S \u4e2d\u7684\u5b57\u7b26 C \u7684\u6700\u77ed\u8ddd\u79bb\u7684\u6570\u7ec4\u3002\n\n\u793a\u4f8b 1:\n\n\u8f93\u5165: S = \"loveleetcode\", C = 'e'\n\u8f93\u51fa: [3, 2, 1, 0, 1, 0, 0, 1, 2, 2, 1, 0]\n\u8bf4\u660e:\n\n- \u5b57\u7b26\u4e32 S \u7684\u957f\u5ea6\u8303\u56f4\u4e3a [1, 10000]\u3002\n- C \u662f\u4e00\u4e2a\u5355\u5b57\u7b26\uff0c\u4e14\u4fdd\u8bc1\u662f\u5b57\u7b26\u4e32 S \u91cc\u7684\u5b57\u7b26\u3002\n- S \u548c C \u4e2d\u7684\u6240\u6709\u5b57\u6bcd\u5747\u4e3a\u5c0f\u5199\u5b57\u6bcd\u3002\n")),(0,a.kt)("h3",{id:"\u601d\u8def-1"},"\u601d\u8def"),(0,a.kt)("p",null,"\u4e2d\u5fc3\u6269\u5c55\uff08\u53cc\u6307\u9488\uff09\uff0c\u4ece\u5f53\u524d\u5b57\u7b26\u5411\u4e24\u8fb9\u627e\u76ee\u6807\u5b57\u7b26\uff0c\u8ba1\u7b97\u8ddd\u79bb\uff0c\u9009\u53d6\u6700\u5c0f\u503c\u3002"),(0,a.kt)("h3",{id:"\u4ee3\u7801-1"},"\u4ee3\u7801"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"var shortestToChar = function (s, c) {\n  const res = new Array(s.length).fill(0);\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == c) {\n      continue;\n    }\n    let l = i,\n      r = i,\n      shortest = Infinity;\n    while (l >= 0) {\n      if (s[l] == c) {\n        shortest = Math.min(i - l, shortest);\n        break;\n      }\n      l--;\n    }\n    while (r < s.length) {\n      if (s[r] == c) {\n        shortest = Math.min(r - i, shortest);\n        break;\n      }\n      r++;\n    }\n    res[i] = shortest;\n  }\n  return res;\n};\n")),(0,a.kt)("h3",{id:"\u590d\u6742\u5ea6\u5206\u6790"},"\u590d\u6742\u5ea6\u5206\u6790"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\uff0cn \u4e3a s \u7684\u957f\u5ea6\uff0c\u4e24\u5c42\u5faa\u73af"),(0,a.kt)("li",{parentName:"ul"},"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)")),(0,a.kt)("h3",{id:"rust-\u7248\u672c-1"},"rust \u7248\u672c"),(0,a.kt)("p",null,"\u6536\u96c6\u5b57\u7b26 c \u7684\u4f4d\u7f6e\uff0c\u5bf9\u5f53\u524d\u5143\u7d20\u6c42\u5176\u5230\u6bcf\u4e00\u4e2a\u5b57\u7b26 c \u7684\u8ddd\u79bb\uff0c\u53d6\u6700\u5c0f\u503c"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"impl Solution {\n    pub fn shortest_to_char(s: String, c: char) -> Vec<i32> {\n        // n \u7528\u6765\u6536\u96c6 \u5b57\u7b26c\u51fa\u73b0\u7684\u4f4d\u7f6e\n        let mut n: Vec<i32> = Vec::new();\n        let mut a: Vec<i32> = Vec::new();\n        // \u9898\u76ee\u4e2d\u6700\u5927\u662f10^4 \u6b21\u65b9\n        let mut min = 10000;\n        for (i, v) in s.chars().enumerate() {\n            if v == c {\n                n.push(i as i32);\n            }\n        }\n        // \u904d\u5386\u5b57\u7b26\u4e32\uff0c\u5bf9\u5f53\u524d\u5143\u7d20\uff0c\u904d\u5386\u76ee\u6807\u5b57\u7b26\u7ec4\u96c6\uff0c\u5f97\u5230\u5f53\u524d\u5143\u7d20\u548c\u6bcf\u4e00\u4e2a\u76ee\u6807\u5b57\u7b26\u7684\u8ddd\u79bb\uff0c\u8bb0\u5f55\u6700\u5c0f\u503c\n        for i in 0..s.len() {\n            min = 10000;\n            for (_, v) in n.iter().enumerate() {\n                let m = i32::abs(v - i as i32);\n                if min > m {\n                    min = m;\n                }\n            }\n            a.push(min);\n        }\n        a\n    }\n}\n")),(0,a.kt)("h2",{id:"1381-\u8bbe\u8ba1\u4e00\u4e2a\u652f\u6301\u589e\u91cf\u64cd\u4f5c\u7684\u6808"},(0,a.kt)("a",{parentName:"h2",href:"https://leetcode-cn.com/problems/design-a-stack-with-increment-operation/"},"1381. \u8bbe\u8ba1\u4e00\u4e2a\u652f\u6301\u589e\u91cf\u64cd\u4f5c\u7684\u6808")),(0,a.kt)("p",null,"4 \u6708 3 \u65e5"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'\u8bf7\u4f60\u8bbe\u8ba1\u4e00\u4e2a\u652f\u6301\u4e0b\u8ff0\u64cd\u4f5c\u7684\u6808\u3002\n\n\u5b9e\u73b0\u81ea\u5b9a\u4e49\u6808\u7c7b CustomStack \uff1a\n\nCustomStack(int maxSize)\uff1a\u7528 maxSize \u521d\u59cb\u5316\u5bf9\u8c61\uff0cmaxSize \u662f\u6808\u4e2d\u6700\u591a\u80fd\u5bb9\u7eb3\u7684\u5143\u7d20\u6570\u91cf\uff0c\u6808\u5728\u589e\u957f\u5230 maxSize \u4e4b\u540e\u5219\u4e0d\u652f\u6301 push \u64cd\u4f5c\u3002\nvoid push(int x)\uff1a\u5982\u679c\u6808\u8fd8\u672a\u589e\u957f\u5230 maxSize \uff0c\u5c31\u5c06 x \u6dfb\u52a0\u5230\u6808\u9876\u3002\nint pop()\uff1a\u5f39\u51fa\u6808\u9876\u5143\u7d20\uff0c\u5e76\u8fd4\u56de\u6808\u9876\u7684\u503c\uff0c\u6216\u6808\u4e3a\u7a7a\u65f6\u8fd4\u56de -1 \u3002\nvoid inc(int k, int val)\uff1a\u6808\u5e95\u7684 k \u4e2a\u5143\u7d20\u7684\u503c\u90fd\u589e\u52a0 val \u3002\u5982\u679c\u6808\u4e2d\u5143\u7d20\u603b\u6570\u5c0f\u4e8e k \uff0c\u5219\u6808\u4e2d\u7684\u6240\u6709\u5143\u7d20\u90fd\u589e\u52a0 val \u3002\n\n\n\u793a\u4f8b\uff1a\n\n\u8f93\u5165\uff1a\n["CustomStack","push","push","pop","push","push","push","increment","increment","pop","pop","pop","pop"]\n[[3],[1],[2],[],[2],[3],[4],[5,100],[2,100],[],[],[],[]]\n\u8f93\u51fa\uff1a\n[null,null,null,2,null,null,null,null,null,103,202,201,-1]\n\u89e3\u91ca\uff1a\nCustomStack customStack = new CustomStack(3); // \u6808\u662f\u7a7a\u7684 []\ncustomStack.push(1); // \u6808\u53d8\u4e3a [1]\ncustomStack.push(2); // \u6808\u53d8\u4e3a [1, 2]\ncustomStack.pop(); // \u8fd4\u56de 2 --\x3e \u8fd4\u56de\u6808\u9876\u503c 2\uff0c\u6808\u53d8\u4e3a [1]\ncustomStack.push(2); // \u6808\u53d8\u4e3a [1, 2]\ncustomStack.push(3); // \u6808\u53d8\u4e3a [1, 2, 3]\ncustomStack.push(4); // \u6808\u4ecd\u7136\u662f [1, 2, 3]\uff0c\u4e0d\u80fd\u6dfb\u52a0\u5176\u4ed6\u5143\u7d20\u4f7f\u6808\u5927\u5c0f\u53d8\u4e3a 4\ncustomStack.increment(5, 100); // \u6808\u53d8\u4e3a [101, 102, 103]\ncustomStack.increment(2, 100); // \u6808\u53d8\u4e3a [201, 202, 103]\ncustomStack.pop(); // \u8fd4\u56de 103 --\x3e \u8fd4\u56de\u6808\u9876\u503c 103\uff0c\u6808\u53d8\u4e3a [201, 202]\ncustomStack.pop(); // \u8fd4\u56de 202 --\x3e \u8fd4\u56de\u6808\u9876\u503c 202\uff0c\u6808\u53d8\u4e3a [201]\ncustomStack.pop(); // \u8fd4\u56de 201 --\x3e \u8fd4\u56de\u6808\u9876\u503c 201\uff0c\u6808\u53d8\u4e3a []\ncustomStack.pop(); // \u8fd4\u56de -1 --\x3e \u6808\u4e3a\u7a7a\uff0c\u8fd4\u56de -1\n\n\n\u63d0\u793a\uff1a\n\n1 <= maxSize <= 1000\n1 <= x <= 1000\n1 <= k <= 1000\n0 <= val <= 100\n\u6bcf\u79cd\u65b9\u6cd5 increment\uff0cpush \u4ee5\u53ca pop \u5206\u522b\u6700\u591a\u8c03\u7528 1000 \u6b21\n')),(0,a.kt)("h3",{id:"\u601d\u8def-2"},"\u601d\u8def"),(0,a.kt)("p",null,"\u76f4\u63a5\u6309\u7740\u9898\u610f\u5373\u53ef\u3002"),(0,a.kt)("h3",{id:"\u4ee3\u7801-2"},"\u4ee3\u7801"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * @param {number} maxSize\n */\nvar CustomStack = function (maxSize) {\n  this.stack = [];\n  this.maxSize = maxSize;\n};\n\n/**\n * @param {number} x\n * @return {void}\n */\nCustomStack.prototype.push = function (x) {\n  if (this.stack.length === this.maxSize) {\n    return null;\n  }\n  this.stack.push(x);\n};\n\n/**\n * @return {number}\n */\nCustomStack.prototype.pop = function () {\n  var x = this.stack.pop();\n  return x === undefined ? -1 : x;\n};\n\n/**\n * @param {number} k\n * @param {number} val\n * @return {void}\n */\nCustomStack.prototype.increment = function (k, val) {\n  for (let i = 0; i < k && i < this.stack.length; i++) {\n    this.stack[i] = this.stack[i] + val;\n  }\n};\n\n/**\n * Your CustomStack object will be instantiated and called as such:\n * var obj = new CustomStack(maxSize)\n * obj.push(x)\n * var param_2 = obj.pop()\n * obj.increment(k,val)\n */\n")),(0,a.kt)("h3",{id:"\u590d\u6742\u5ea6-1"},"\u590d\u6742\u5ea6"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u65f6\u95f4\u590d\u6742\u5ea6\uff1apush \u64cd\u4f5c\u548c pop \u64cd\u4f5c\u7684\u6e10\u8fdb\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(1)\uff0cinc \u64cd\u4f5c\u7684\u6e10\u8fdb\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(k)"),(0,a.kt)("li",{parentName:"ul"},"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(maxSize)")),(0,a.kt)("h3",{id:"rust-\u7248\u672c-2"},"rust \u7248\u672c"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"struct CustomStack {\n    vec: Vec<i32>,\n}\n\n\n/**\n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl CustomStack {\n\n    fn new(maxSize: i32) -> Self {\n        CustomStack {\n            vec: Vec::with_capacity(maxSize as usize),\n        }\n    }\n\n    fn push(&mut self, x: i32) {\n        if self.vec.len() + 1 <= self.vec.capacity() {\n            self.vec.push(x)\n        }\n    }\n\n    fn pop(&mut self) -> i32 {\n        self.vec.pop().unwrap_or(-1)\n    }\n\n    fn increment(&mut self, k: i32, val: i32) {\n        // iter_mut() \u65b9\u6cd5\u8fd4\u56de\u7684\u8fed\u4ee3\u5143\u7d20\u662f\u4e00\u4e2a \u5f15\u7528\u7c7b\u578b\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5bf9\u8fed\u4ee3\u53d8\u91cf \u89e3\u5f15\u7528 \u7684\u65b9\u5f0f\u6765\u91cd\u65b0\u8d4b\u503c\u3002\n        // take \u521b\u5efa\u4e00\u4e2a\u8fed\u4ee3\u5668\n        for num in self.vec.iter_mut().take(k as usize){\n            *num = val + *num\n        }\n    }\n}\n\n/**\n * Your CustomStack object will be instantiated and called as such:\n * let obj = CustomStack::new(maxSize);\n * obj.push(x);\n * let ret_2: i32 = obj.pop();\n * obj.increment(k, val);\n */\n")),(0,a.kt)("h2",{id:"394\u5b57\u7b26\u4e32\u7f16\u7801"},(0,a.kt)("a",{parentName:"h2",href:"https://leetcode-cn.com/problems/decode-string/"},"394.\u5b57\u7b26\u4e32\u7f16\u7801")),(0,a.kt)("p",null,"4 \u6708 4 \u65e5"),(0,a.kt)("h3",{id:"\u601d\u8def-3"},"\u601d\u8def"),(0,a.kt)("p",null,"\u7ef4\u62a4\u4e00\u4e2a\u6808\uff0c\u904d\u5386\u5224\u65ad"),(0,a.kt)("h3",{id:"\u4ee3\u7801-3"},"\u4ee3\u7801"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'// \u7ef4\u62a4\u4e00\u4e2a\u6808\nvar decodeString = function (s) {\n  const stack = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] != "]") {\n      stack.push(s[i]);\n      continue;\n    }\n    let str = "";\n    let cur = stack.pop();\n    while (cur != "[") {\n      // \u52a0\u5728\u5f53\u524d\u7684\u540e\u9762\n      str = cur + str;\n      cur = stack.pop();\n    }\n    let num = "";\n    // \u6392\u9664 "["\n    cur = stack.pop();\n    // \u5bf9\u4e8e\u6570\u5b57\n    while (!isNaN(cur)) {\n      // \u5b57\u7b26\u4e32\u76f8\u52a0\n      num = cur + num;\n      cur = stack.pop();\n    }\n    // \u5b57\u6bcd \u6216\u8005 "["\n    stack.push(cur);\n    stack.push(str.repeat(num));\n  }\n  return stack.join("");\n};\n')),(0,a.kt)("h3",{id:"\u590d\u6742\u5ea6-2"},"\u590d\u6742\u5ea6"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)"),(0,a.kt)("li",{parentName:"ul"},"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)")),(0,a.kt)("h3",{id:"rust-\u7248\u672c-3"},"rust \u7248\u672c"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"impl Solution {\n    pub fn decode_string(s: String) -> String {\n        let mut stack: Vec<(usize, String)> = Vec::new();\n        let (mut n, mut str) = (0, String::new());\n        for c in s.chars() {\n            // \u6a21\u5f0f\u5339\u914d\n            match c {\n                // \u7f13\u5b58\u524d\u9762\u7684\u5b57\u7b26\uff0c\u4ee5\u53ca\u4e0b\u4e00\u7ec4\u7684\u91cd\u590d\u6b21\u6570\n                '[' => {\n                    stack.push((n, str.clone()));\n                    n = 0;\n                    str.clear();\n                }\n                // \u89e3\u7801\u5b57\u7b26\u4e32\n                ']' => {\n                    if let Some(last) = stack.pop() {\n                        str = last.1 + str.repeat(last.0).as_str();\n                    }\n                }\n                // \u6ce8\u610f\u8981 n*10\n                '0'..='9' => n = n * 10 + (c as u8 - b'0') as usize,\n                // \u7f13\u5b58\u5b57\u7b26\n                c => str.push(c),\n            }\n        }\n        str\n    }\n}\n")),(0,a.kt)("h2",{id:"232-\u7528\u6808\u5b9e\u73b0\u961f\u5217"},(0,a.kt)("a",{parentName:"h2",href:"https://leetcode-cn.com/problems/implement-queue-using-stacks/"},"232. \u7528\u6808\u5b9e\u73b0\u961f\u5217")),(0,a.kt)("p",null,"4 \u6708 5 \u65e5"),(0,a.kt)("h3",{id:"\u601d\u8def-4"},"\u601d\u8def"),(0,a.kt)("p",null,"rust \u53cc\u6808\u5b9e\u73b0\u961f\u5217"),(0,a.kt)("h3",{id:"\u4ee3\u7801-4"},"\u4ee3\u7801"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * Initialize your data structure here.\n */\nvar MyQueue = function () {\n  this.input = [];\n  this.output = [];\n};\n\n/**\n * Push element x to the back of queue.\n * @param {number} x\n * @return {void}\n */\nMyQueue.prototype.push = function (x) {\n  this.input.push(x);\n};\n\n/**\n * Removes the element from in front of queue and returns that element.\n * @return {number}\n */\nMyQueue.prototype.pop = function () {\n  if (!this.output.length) {\n    while (this.input.length) {\n      this.output.push(this.input.pop());\n    }\n  }\n  return this.output.pop();\n};\n\n/**\n * Get the front element.\n * @return {number}\n */\nMyQueue.prototype.peek = function () {\n  if (!this.output.length) {\n    while (this.input.length) {\n      this.output.push(this.input.pop());\n    }\n  }\n  return this.output[this.output.length - 1];\n};\n\n/**\n * Returns whether the queue is empty.\n * @return {boolean}\n */\nMyQueue.prototype.empty = function () {\n  return this.input.length == 0 && this.output.length == 0;\n};\n")),(0,a.kt)("h3",{id:"\u590d\u6742\u5ea6-3"},"\u590d\u6742\u5ea6"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"\u9488\u5bf9\u4e8e rust \u6765\u8bf4")),(0,a.kt)("p",null,"push \uff1a"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(1)"),(0,a.kt)("li",{parentName:"ul"},"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)")),(0,a.kt)("p",null,"pop \uff1a"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(1)"),(0,a.kt)("li",{parentName:"ul"},"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)")),(0,a.kt)("p",null,"peek\uff1a"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u6700\u597d\u7684\u60c5\u51b5 O(1) \u6700\u574f\u7684\u60c5\u51b5 O(n)"),(0,a.kt)("li",{parentName:"ul"},"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)")),(0,a.kt)("p",null,"empty\uff1a"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(1)"),(0,a.kt)("li",{parentName:"ul"},"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)")),(0,a.kt)("h3",{id:"rust-\u7248\u672c-4"},"rust \u7248\u672c"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"struct MyQueue {\n    input: Vec<i32>,\n    output: Vec<i32>,\n}\n\nimpl MyQueue {\n\n    fn new() -> Self {\n        Self {\n            input: vec![],\n            output: vec![],\n        }\n    }\n\n    fn push(&mut self, x: i32) {\n        self.input.push(x);\n    }\n\n    fn pop(&mut self) -> i32 {\n        self.peek();\n        self.output.pop().unwrap()\n    }\n\n    fn peek(&mut self) -> i32 {\n        if self.output.is_empty() {\n            while self.input.len() > 0 {\n                self.output.push(self.input.pop().unwrap());\n            }\n\n        }\n        self.output.last().cloned().unwrap()\n    }\n\n    fn empty(&mut self) -> bool {\n        self.input.is_empty() && self.output.is_empty()\n    }\n}\n")),(0,a.kt)("h2",{id:"768-\u6700\u591a\u80fd\u5b8c\u6210\u6392\u5e8f\u7684\u5757-ii"},(0,a.kt)("a",{parentName:"h2",href:"https://leetcode-cn.com/problems/max-chunks-to-make-sorted-ii/"},"768. \u6700\u591a\u80fd\u5b8c\u6210\u6392\u5e8f\u7684\u5757 II")),(0,a.kt)("p",null,"4 \u6708 6 \u65e5"),(0,a.kt)("h3",{id:"\u601d\u8def-5"},"\u601d\u8def"),(0,a.kt)("p",null,"\u524d\u7f00\u548c"),(0,a.kt)("h3",{id:"\u4ee3\u7801-5"},"\u4ee3\u7801"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"var maxChunksToSorted = function (arr) {\n  let sum1 = 0;\n  let sum2 = 0;\n  let ans = 0;\n  let arr2 = [...arr].sort((a, b) => a - b);\n  for (let i in arr) {\n    sum1 = sum1 + arr[i];\n    sum2 = sum2 + arr2[i];\n    if (sum1 == sum2) {\n      ans += 1;\n      sum1 = 0;\n      sum2 = 0;\n    }\n  }\n  return ans;\n};\n")),(0,a.kt)("h3",{id:"\u590d\u6742\u5ea6-4"},"\u590d\u6742\u5ea6"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)"),(0,a.kt)("li",{parentName:"ul"},"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)")),(0,a.kt)("h3",{id:"rust-\u7248\u672c-5"},"rust \u7248\u672c"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"impl Solution {\n    pub fn max_chunks_to_sorted(arr: Vec<i32>) -> i32 {\n        let mut sum1 = 0;\n        let mut sum2 = 0;\n        let mut ans = 0;\n        let mut arr_sorted = arr.to_vec();\n        arr_sorted.sort();\n        for i in 0..arr.len() {\n            sum1 = sum1 + arr[i];\n            sum2 = sum2 + arr_sorted[i];\n            if sum1 == sum2 {\n                ans += 1;\n                sum1 = 0;\n                sum2 = 0;\n            }\n        }\n        ans\n    }\n}\n")),(0,a.kt)("h2",{id:"61-\u65cb\u8f6c\u94fe\u8868"},(0,a.kt)("a",{parentName:"h2",href:"https://leetcode-cn.com/problems/rotate-list/"},"61. \u65cb\u8f6c\u94fe\u8868")),(0,a.kt)("p",null,"4 \u6708 7 \u65e5"),(0,a.kt)("h3",{id:"\u601d\u8def-6"},"\u601d\u8def"),(0,a.kt)("p",null,"\u5c06\u540e k \u4e2a\u540e\u9762\u63a5\u4e0a\u524d n-k \u4e2a\u8282\u70b9"),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://pic.rmb.bdstatic.com/bjh/b8afad81f7caec9df5cfd245a7cd14af.png",alt:"image.png"})),(0,a.kt)("h3",{id:"\u4ee3\u7801-6"},"\u4ee3\u7801"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"var rotateRight = function (head, k) {\n  let curNode = new ListNode(0, head);\n  let count = 0;\n  // \u94fe\u8868\u957f\u5ea6\n  while (curNode.next) {\n    curNode = curNode.next;\n    count++;\n  }\n  // \u8003\u8651\u5230 k \u53ef\u80fd\u5f88\u5927\n  let n = k % count;\n  let p = new ListNode(0, head);\n  // \u627e\u5230\u7b2c n-k \u7684\u4f4d\u7f6e\n  for (let i = 0; i < count - n; i++) {\n    p = p.next;\n  }\n  curNode.next = head;\n  head = p.next;\n  p.next = null;\n  return head;\n};\n")),(0,a.kt)("h3",{id:"\u590d\u6742\u5ea6-5"},"\u590d\u6742\u5ea6"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)"),(0,a.kt)("li",{parentName:"ul"},"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)")),(0,a.kt)("h3",{id:"rust-\u7248\u672c-6"},"rust \u7248\u672c"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"impl Solution {\n    pub fn rotate_right(head: Option<Box<ListNode>>, k: i32) -> Option<Box<ListNode>> {\n        let mut v: Vec<i32> = Vec::new();\n        let mut node = &head;\n        // \u83b7\u53d6\u603b\u957f\u5ea6\n        while let Some(n) = node {\n            v.push(n.val);\n            node = &n.next;\n        }\n        // \u7f13\u5b58\u65b0\u94fe\u8868\n        let mut answer = None;\n        // \u6784\u5efa\u94fe\u8868\n        for i in (0..v.len()).rev() {\n            let j = k as usize % v.len();\n            answer = Some(Box::new(ListNode {\n                val: v[(v.len() + i - j) % v.len()],\n                next: answer,\n            }))\n        }\n        answer\n    }\n}\n")),(0,a.kt)("h2",{id:"24-\u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9"},(0,a.kt)("a",{parentName:"h2",href:"https://leetcode-cn.com/problems/swap-nodes-in-pairs/"},"24. \u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9")),(0,a.kt)("p",null,"4 \u6708 8 \u65e5"),(0,a.kt)("h3",{id:"\u601d\u8def-7"},"\u601d\u8def"),(0,a.kt)("p",null,"rust \u5199\u94fe\u8868\u9898\u5f88\u4e0d\u65b9\u4fbf\uff0c\u540c\u4e00\u65f6\u523b\uff0c\u53ea\u80fd\u62e5\u6709\u4e00\u4e2a\u53ef\u53d8\u5f15\u7528\uff0c\u6240\u4ee5\u4e0b\u9762\u7684\u4ee3\u7801\u6ca1\u529e\u6cd5\u7f16\u8bd1\u901a\u8fc7\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"let mut prev = head;\nlet mut current = prev.next.unwrap();\n")),(0,a.kt)("p",null,"\u6240\u4ee5\u9700\u8981\u5229\u7528 ",(0,a.kt)("inlineCode",{parentName:"p"},"take()")," \u53d6\u51fa ",(0,a.kt)("inlineCode",{parentName:"p"},"Option<T>")," \u540e\u5728\u539f\u6765\u4f4d\u7f6e\u653e\u5165 None \u6765\u201c\u6253\u65ad\u201d\u94fe\u8868\uff0c\u8fd9\u6837\u5c31\u80fd\u83b7\u5f97\u4e24\u4e2a\u62e5\u6709\u6240\u6709\u6743\u7684\u53d8\u91cf\uff0c\u4e00\u4e2a\u662f\u524d\u9762\u90e8\u5206\uff0c\u4e00\u4e2a\u662f\u540e\u9762\u90e8\u5206"),(0,a.kt)("h3",{id:"\u4ee3\u7801-7"},"\u4ee3\u7801"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"var swapPairs = function (head) {\n  const dummy = new ListNode(0);\n  dummy.next = head;\n  let pre = dummy;\n  while (head && head.next) {\n    // \u4e34\u65f6\u4fdd\u5b58head.next\uff0c\u56e0\u4e3ahead.next\u5f85\u4f1a\u8981\u6539\u53d8\n    let next = head.next;\n    head.next = next.next;\n    next.next = head;\n    pre.next = next;\n    // \u6307\u9488\u66f4\u65b0 \u5148\u53d8pre\n    pre = head;\n    head = head.next;\n  }\n  return dummy.next;\n};\n")),(0,a.kt)("h3",{id:"\u590d\u6742\u5ea6-6"},"\u590d\u6742\u5ea6"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)"),(0,a.kt)("li",{parentName:"ul"},"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)")),(0,a.kt)("h3",{id:"rust-\u7248\u672c-7"},"rust \u7248\u672c"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"impl Solution {\n  pub fn swap_pairs(mut head: Option<Box<ListNode>>) -> Option<Box<ListNode>> {\n    let mut list = ListNode::new(0);\n    let mut tail = &mut list.next;\n    let mut temp = None;\n    while let Some(mut node) = head.take() {\n        head = node.next.take();\n\n        match temp.take() {\n            None => temp = Some(node),\n            Some(temp) => {\n                node.next = Some(temp);\n                *tail = Some(node);\n                tail = &mut tail.as_mut().unwrap().next.as_mut().unwrap().next;\n            }\n        }\n    }\n    *tail = temp;\n    list.next.take()\n  }\n}\n")),(0,a.kt)("h2",{id:"109-\u6709\u5e8f\u94fe\u8868\u8f6c\u6362\u4e8c\u53c9\u641c\u7d22\u6811"},(0,a.kt)("a",{parentName:"h2",href:"https://leetcode-cn.com/problems/convert-sorted-list-to-binary-search-tree/"},"109. \u6709\u5e8f\u94fe\u8868\u8f6c\u6362\u4e8c\u53c9\u641c\u7d22\u6811")),(0,a.kt)("p",null,"4 \u6708 9 \u65e5"),(0,a.kt)("h3",{id:"\u601d\u8def-8"},"\u601d\u8def"),(0,a.kt)("p",null,"\u9012\u5f52\u6570\u7ec4\uff0c\u53d6\u4e2d\u95f4\u8282\u70b9\uff0c\u6784\u5efa bst"),(0,a.kt)("h3",{id:"\u4ee3\u7801-8"},"\u4ee3\u7801"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"var sortedListToBST = function (head) {\n  const arr = [];\n  while (head) {\n    arr.push(head.val);\n    head = head.next;\n  }\n  const buildBst = (arr) => {\n    if (arr.length == 0) return null;\n    let mid = Math.floor(arr.length / 2);\n    const root = new TreeNode(arr[mid]);\n    root.left = buildBst(arr.slice(0, mid));\n    root.right = buildBst(arr.slice(mid + 1));\n    return root;\n  };\n  return buildBst(arr);\n};\n")),(0,a.kt)("h3",{id:"\u590d\u6742\u5ea6-7"},"\u590d\u6742\u5ea6"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)"),(0,a.kt)("li",{parentName:"ul"},"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(logn)")),(0,a.kt)("h3",{id:"rust-\u7248\u672c-8"},"rust \u7248\u672c"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"use std::cell::RefCell;\nuse std::rc::Rc;\nimpl Solution {\n    pub fn sorted_list_to_bst(mut head: Option<Box<ListNode>>) -> Option<Rc<RefCell<TreeNode>>> {\n        let mut stack = Vec::new();\n        // \u6536\u96c6\u94fe\u8868\u8282\u70b9\u503c\n        while let Some(node) = head {\n            stack.push(node.val);\n            head = node.next;\n        }\n        Solution::s(&stack[..])\n    }\n    pub fn s(nums: &[i32]) -> Option<Rc<RefCell<TreeNode>>> {\n        let mut n = nums.len();\n        if n == 0 {\n            return None;\n        }\n        let mid = n / 2;\n        let mut node = TreeNode::new(nums[mid]);\n        // \u9012\u5f52\u521b\u5efa\u5de6\u5b50\u6811\n        node.left = Solution::s(&nums[..mid]);\n        // \u9012\u5f52\u521b\u5efa\u53f3\u5b50\u6811\n        node.right = Solution::s(&nums[mid + 1..]);\n        Some(Rc::new(RefCell::new(node)))\n    }\n}\n")),(0,a.kt)("h2",{id:"160-\u76f8\u4ea4\u94fe\u8868"},(0,a.kt)("a",{parentName:"h2",href:"https://leetcode-cn.com/problems/intersection-of-two-linked-lists/"},"160. \u76f8\u4ea4\u94fe\u8868")),(0,a.kt)("p",null,"4 \u6708 10 \u65e5"),(0,a.kt)("h3",{id:"\u601d\u8def-9"},"\u601d\u8def"),(0,a.kt)("p",null,"\u53cc\u6307\u9488\uff0c\u4e24\u4e2a\u6307\u9488\u7684\u904d\u5386\u603b\u957f\u5ea6\u662f\u4e00\u6837\u7684"),(0,a.kt)("h3",{id:"\u4ee3\u7801-9"},"\u4ee3\u7801"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"var getIntersectionNode = function (headA, headB) {\n  let a = headA,\n    b = headB;\n  while (a !== b) {\n    a = a === null ? headB : a.next;\n    b = b === null ? headA : b.next;\n  }\n  return a;\n};\n")),(0,a.kt)("h3",{id:"\u590d\u6742\u5ea6-8"},"\u590d\u6742\u5ea6"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(m+n)\uff0c\u5176\u4e2d m \u548c n \u662f\u5206\u522b\u662f\u94fe\u8868 headA \u548c headB \u7684\u957f\u5ea6\u3002\u4e24\u4e2a\u6307\u9488\u540c\u65f6\u904d\u5386\u4e24\u4e2a\u94fe\u8868\uff0c\u6bcf\u4e2a\u6307\u9488\u904d\u5386\u4e24\u4e2a\u94fe\u8868\u5404\u4e00\u6b21"),(0,a.kt)("li",{parentName:"ul"},"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a0(1)")),(0,a.kt)("h2",{id:"142-\u73af\u5f62\u94fe\u8868-ii"},(0,a.kt)("a",{parentName:"h2",href:"https://leetcode-cn.com/problems/linked-list-cycle-ii/"},"142. \u73af\u5f62\u94fe\u8868 II")),(0,a.kt)("p",null,"4 \u6708 11 \u65e5"),(0,a.kt)("h3",{id:"\u601d\u8def-10"},"\u601d\u8def"),(0,a.kt)("p",null,"\u5feb\u6162\u6307\u9488\uff0cslow \u8d70 1 \u6b65\uff0cfast \u8d70 2 \u6b65\uff0c\u5047\u8bbe\u6700\u7ec8\u76f8\u9047 slow \u8d70\u4e86 k \u6b65\uff0c\u5219 fast \u8d70\u4e86 2k \u6b65\uff0c\u4ece head \u5230\u5165\u73af\u70b9\u662f k-m\uff0c\u4ece\u5165\u73af\u70b9\u5230\u76f8\u9047\u70b9\u662f m\uff0c\u6240\u4ee5 fast \u4ece\u76f8\u9047\u70b9\u518d\u5230\u5165\u73af\u70b9\u8d70\u4e86 k-m"),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://tva2.sinaimg.cn/large/006T9etDly1h15qy1rhifj310u0nitd2.jpg",alt:"image"})),(0,a.kt)("h3",{id:"\u4ee3\u7801-10"},"\u4ee3\u7801"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"var detectCycle = function (head) {\n  let slow = head;\n  let fast = head;\n  while (fast) {\n    if (fast.next == null) {\n      // fast.next\u8d70\u51fa\u94fe\u8868\u4e86\uff0c\u8bf4\u660e\u65e0\u73af\n      return null;\n    }\n    slow = slow.next;\n    fast = fast.next.next;\n    if (slow == fast) {\n      fast = head;\n      while (true) {\n        if (slow == fast) {\n          return slow;\n        }\n        slow = slow.next;\n        fast = fast.next;\n      }\n    }\n  }\n  return null;\n};\n")),(0,a.kt)("h3",{id:"\u590d\u6742\u5ea6-9"},"\u590d\u6742\u5ea6"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)"),(0,a.kt)("li",{parentName:"ul"},"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)")),(0,a.kt)("h2",{id:"146-lru-\u7f13\u5b58"},(0,a.kt)("a",{parentName:"h2",href:"https://leetcode-cn.com/problems/lru-cache/"},"146. LRU \u7f13\u5b58")),(0,a.kt)("p",null,"4 \u6708 12 \u65e5"),(0,a.kt)("h3",{id:"\u601d\u8def-11"},"\u601d\u8def"),(0,a.kt)("p",null,"\u5229\u7528 Map \u6765\u505a\uff0c\u65b0\u7684 k-v \u653e\u5230\u672b\u5c3e\uff0c\u5934\u90e8\u5c31\u662f\u6700\u8fd1\u6700\u4e45\u4f7f\u7528\u7684\u503c\uff0c\u53ef\u4ee5\u5229\u7528 map.keys()\u62ff\u5230\u5934\u90e8\u7684 k"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u5229\u7528 map \u6765\u4fdd\u5b58\u6570\u636e",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"get\uff1a\u8bbf\u95ee key\uff0c\u8bbf\u95ee\u5b8c\u5c06\u5176\u653e\u5728\u6700\u540e\u3002\u6240\u4ee5\uff0c\u82e5 key \u5b58\u5728\uff0c\u5148\u4fdd\u5b58 value \u503c\uff0c\u5220\u9664 key\uff0c\u518d\u6dfb\u52a0 key\uff0c\u6700\u540e\u8fd4\u56de\u4fdd\u5b58\u7684 value \u503c\u3002\u82e5 key \u4e0d\u5b58\u5728\uff0c\u8fd4\u56de-1"),(0,a.kt)("li",{parentName:"ul"},"put\uff1a\u65b0\u589e key\uff0c\u5c06\u5176\u653e\u5728\u6700\u540e\u3002\u6240\u4ee5\uff0c\u82e5 key \u5b58\u5728\uff0c\u5148\u5220\u9664\uff0c\u518d\u6dfb\u52a0\u3002\u5982\u679c\u5bb9\u91cf\u8d85\u51fa\u8303\u56f4\u4e86\uff0c\u5c06 map \u4e2d\u7684\u5934\u90e8\u5220\u9664\u3002")))),(0,a.kt)("p",null,"\u5173\u952e\u5728\u4e8e\u5220\u9664 map \u4e2d\u7684\u5934\u90e8 key\uff1a"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"map.keys()\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668"),(0,a.kt)("li",{parentName:"ul"},"\u8fed\u4ee3\u5668\u8c03\u7528 next \u65b9\u6cd5\uff0c\u8fd4\u56de value \u5b57\u6bb5\u548c done \u5b57\u6bb5\u7ec4\u6210\u7684\u5bf9\u8c61")),(0,a.kt)("h3",{id:"\u4ee3\u7801-11"},"\u4ee3\u7801"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"var LRUCache = function (capacity) {\n  this.capacity = capacity;\n  this.map = new Map();\n};\n\nLRUCache.prototype.get = function (key) {\n  if (this.map.has(key)) {\n    const temp = this.map.get(key);\n    this.map.delete(key);\n    this.map.set(key, temp);\n    return temp;\n  }\n  return -1;\n};\n\nLRUCache.prototype.put = function (key, value) {\n  // \u8981\u5c06\u5176\u653e\u5728\u6700\u540e\uff0c\u6240\u4ee5\u82e5\u5b58\u5728key\uff0c\u5148\u5220\u9664\n  if (this.map.has(key)) this.map.delete(key);\n  // \u8bbe\u7f6ekey\u3001value\n  this.map.set(key, value);\n  if (this.map.size > this.capacity) {\n    this.map.delete(this.map.keys().next().value);\n  }\n};\n")),(0,a.kt)("h3",{id:"\u590d\u6742\u5ea6-10"},"\u590d\u6742\u5ea6"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(1)"),(0,a.kt)("li",{parentName:"ul"},"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)")),(0,a.kt)("h2",{id:"104-\u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6"},(0,a.kt)("a",{parentName:"h2",href:"https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/"},"104. \u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6")),(0,a.kt)("p",null,"4 \u6708 13 \u65e5"),(0,a.kt)("h3",{id:"\u601d\u8def-12"},"\u601d\u8def"),(0,a.kt)("p",null,"DFS \u548c BFS"),(0,a.kt)("h3",{id:"\u4ee3\u7801-12"},"\u4ee3\u7801"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"// \u672c\u8d28\u4e0a\u5c31\u662f\u4e00\u4e2a\u5c42\u5e8f\u904d\u5386\nvar maxDepth = function (root) {\n  if (!root) return 0;\n  const queue = [root];\n  let depth = 1;\n  while (queue.length) {\n    let len = queue.length;\n    // \u6536\u96c6\u6bcf\u4e00\u5c42\u7684\u8282\u70b9\n    for (let i = 0; i < len; i++) {\n      const top = queue.shift();\n      if (top.left) {\n        queue.push(top.left);\n      }\n      if (top.right) {\n        queue.push(top.right);\n      }\n    }\n    // \u53ea\u8981\u6709\u6536\u96c6\u7684\u8282\u70b9\u5c31\u8bf4\u660e\u5c42\u6570+1\n    queue.length && depth++;\n  }\n  return depth;\n};\n")),(0,a.kt)("h3",{id:"\u590d\u6742\u5ea6-11"},"\u590d\u6742\u5ea6"),(0,a.kt)("p",null,"\u5bf9\u4e8e dfs\uff1a"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u5176\u4e2d n \u4e3a\u4e8c\u53c9\u6811\u8282\u70b9\u7684\u4e2a\u6570\u3002\u6bcf\u4e2a\u8282\u70b9\u5728\u9012\u5f52\u4e2d\u53ea\u88ab\u904d\u5386\u4e00\u6b21"),(0,a.kt)("li",{parentName:"ul"},"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(maxHeight)\uff0c\u5176\u4e2d maxHeight \u8868\u793a\u4e8c\u53c9\u6811\u7684\u9ad8\u5ea6\u3002\u9012\u5f52\u51fd\u6570\u9700\u8981\u6808\u7a7a\u95f4\uff0c\u800c\u6808\u7a7a\u95f4\u53d6\u51b3\u4e8e\u9012\u5f52\u7684\u6df1\u5ea6\uff0c\u56e0\u6b64\u7a7a\u95f4\u590d\u6742\u5ea6\u7b49\u4ef7\u4e8e\u4e8c\u53c9\u6811\u7684\u9ad8\u5ea6")),(0,a.kt)("p",null,"\u5bf9\u4e8e bfs\uff1a"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u5176\u4e2d n \u4e3a\u4e8c\u53c9\u6811\u7684\u8282\u70b9\u4e2a\u6570\u3002\u6bcf\u4e2a\u8282\u70b9\u53ea\u4f1a\u88ab\u8bbf\u95ee\u4e00\u6b21"),(0,a.kt)("li",{parentName:"ul"},"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a\u6b64\u65b9\u6cd5\u7a7a\u95f4\u7684\u6d88\u8017\u53d6\u51b3\u4e8e\u961f\u5217\u5b58\u50a8\u7684\u5143\u7d20\u6570\u91cf\uff0c\u5176\u5728\u6700\u574f\u60c5\u51b5\u4e0b\u4f1a\u8fbe\u5230 O(n)")),(0,a.kt)("h3",{id:"rust-\u7248\u672c-9"},"rust \u7248\u672c"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"use std::rc::Rc;\nuse std::cell::RefCell;\nuse std::cmp::max;\nimpl Solution {\n    pub fn max_depth(root: Option<Rc<RefCell<TreeNode>>>) -> i32 {\n        let mut max_val = 0;\n\n        if let Some(node) = root {\n            let left = 1 + Solution::max_depth(node.borrow_mut().left.take());\n            let right = 1 + Solution::max_depth(node.borrow_mut().right.take());\n\n            max_val = max(left, right);\n        }\n\n        max_val\n    }\n}\n")),(0,a.kt)("h2",{id:"100-\u76f8\u540c\u7684\u6811"},(0,a.kt)("a",{parentName:"h2",href:"https://leetcode-cn.com/problems/same-tree/"},"100. \u76f8\u540c\u7684\u6811")),(0,a.kt)("p",null,"4 \u6708 14 \u65e5"),(0,a.kt)("h3",{id:"\u601d\u8def-13"},"\u601d\u8def"),(0,a.kt)("p",null,"dfs"),(0,a.kt)("h3",{id:"\u4ee3\u7801-13"},"\u4ee3\u7801"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"var isSameTree = function (p, q) {\n  if (p == null && q == null) {\n    return true;\n  }\n  if (p == null || q == null) {\n    return false;\n  }\n  if (p.val != q.val) {\n    return false;\n  }\n  return isSameTree(p.left, q.left) && isSameTree(p.right, q.right);\n};\n")),(0,a.kt)("h3",{id:"\u590d\u6742\u5ea6-12"},"\u590d\u6742\u5ea6"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(min(m,n))\uff0c\u5176\u4e2d m \u548c n \u5206\u522b\u662f\u4e24\u4e2a\u4e8c\u53c9\u6811\u7684\u8282\u70b9\u6570\u3002\u5bf9\u4e24\u4e2a\u4e8c\u53c9\u6811\u540c\u65f6\u8fdb\u884c\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff0c\u53ea\u6709\u5f53\u4e24\u4e2a\u4e8c\u53c9\u6811\u4e2d\u7684\u5bf9\u5e94\u8282\u70b9\u90fd\u4e0d\u4e3a\u7a7a\u65f6\u624d\u4f1a\u8bbf\u95ee\u5230\u8be5\u8282\u70b9\uff0c\u56e0\u6b64\u88ab\u8bbf\u95ee\u5230\u7684\u8282\u70b9\u6570\u4e0d\u4f1a\u8d85\u8fc7\u8f83\u5c0f\u7684\u4e8c\u53c9\u6811\u7684\u8282\u70b9\u6570")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(min(m,n))\uff0c\u5176\u4e2d m \u548c n \u5206\u522b\u662f\u4e24\u4e2a\u4e8c\u53c9\u6811\u7684\u8282\u70b9\u6570\u3002\u7a7a\u95f4\u590d\u6742\u5ea6\u53d6\u51b3\u4e8e\u9012\u5f52\u8c03\u7528\u7684\u5c42\u6570\uff0c\u9012\u5f52\u8c03\u7528\u7684\u5c42\u6570\u4e0d\u4f1a\u8d85\u8fc7\u8f83\u5c0f\u7684\u4e8c\u53c9\u6811\u7684\u6700\u5927\u9ad8\u5ea6\uff0c\u6700\u574f\u60c5\u51b5\u4e0b\uff0c\u4e8c\u53c9\u6811\u7684\u9ad8\u5ea6\u7b49\u4e8e\u8282\u70b9\u6570"))),(0,a.kt)("h3",{id:"rust-\u7248\u672c-10"},"rust \u7248\u672c"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"use std::cell::RefCell;\nuse std::rc::Rc;\nimpl Solution {\n    pub fn is_same_tree(\n        p: Option<Rc<RefCell<TreeNode>>>,\n        q: Option<Rc<RefCell<TreeNode>>>,\n    ) -> bool {\n        Solution::is_same_tree_impl(&p, &q)\n    }\n    pub fn is_same_tree_impl(\n        p: &Option<Rc<RefCell<TreeNode>>>,\n        q: &Option<Rc<RefCell<TreeNode>>>,\n    ) -> bool {\n        if p.is_none() && q.is_none() {\n            return true;\n        }\n        if p.is_none() || q.is_none() {\n            return false;\n        }\n        let a: &TreeNode = &p.as_ref().unwrap().borrow();\n        let b: &TreeNode = &q.as_ref().unwrap().borrow();\n\n        if a.val != b.val {\n            return false;\n        }\n        Solution::is_same_tree_impl(&a.left, &b.left)\n            && Solution::is_same_tree_impl(&a.right, &b.right)\n    }\n}\n")))}m.isMDXComponent=!0}}]);